{
  "title": "Breaking Down OO Problems RB120 assimentÂ ",
  "cells": [
    {
      "type": "markdown",
      "data": "Practice problems: easy 3 question 1\n\n\n```ruby\nclass Greeting\n  def greet(message)\n    puts message\n  end\nend \n\nclass Hello < Gretting\n  def hi\n    greet(\"Hello\")\n  end\nend\n\nclass Goodbye < Gretting\n  def Goodbye < greating\n    greet(\"goodby:)\n  end\nend\n\n```\n\nIn the above code a class `Greeting` is defined.  Withien the class an instance method `greet` is defined which takes one argument.  within the instance method puts is called on the object that message points to, printing the return value of `to_s` on that object and outputting `nil`\n\na second class `Hello` is defined which inherits from the super class greeting.  No all the behaviors (istance methods) of greeing are available to the subclass `Hello`.  The `Hello` class defines a method `hi` which calls the greet method, which ruby looks up in the method look up path, locating it within the `Greeting` super class.  The string object is passed into the istance method greet as an argument. Which is a assigned to point to the local variable message which then gets passed to puts..  \n\nPractice problem:  Easy 3 question 6\n\n```ruby\nclass Cat\n  attr_accessor :type, :age\n  \n  def initialize(type)\n    @type = type\n    @age = 0\n  end\n  \n  def make_on_year_older\n    self.age +=1\n  end\nend\n\ntabby = Cat.new(\"tabby\")\ntabby.make_on_year_older\n```\nIn the above code a class `Cat` is defined.   it has a constructor method (or initialize method) which is called every time a new `Cat` object is instantiated using the class method `new`.  The initialize method is defined with one parameter `type`.  Upon instantiation, the new class method passes an argument trhogu the the constructor method, the local variable `type` is then assigned to the argument passed in.  The object which type is pointing to is then set to be refernce by the `@type` instance variable. within the contstructor method the age variable is assigned to point to the integer object `0`.\n\non line ___ the an a new object, `tabby` of the `Cat` class is instantiated, by way of the `new` class method invocation on the `Cat` class.  The new mmethod passes the string \"tabby\"  through to the constructor method (initialize) within the cat class, where it is set to the local variable `type` The `@type` instance variable is then set to point to the same string object \"tabby\" which the local variable type is pointing to.\n\non line ___ the instance method `make_on_year_older` is called on the `Cat` object, `tabby`.  Within the `make_on_year_older` instance method the `.age=(0 ` instance method is called on `self` which references the calling object, `tabby`.  The setter method made available by the att_accessor that lets the new @age instance variable be assigned to point to the return value of age.+(1)\n\n\n```ruby\n\nclass Dog\n  def initialzie(name)\n    @name = name\n  end\n  \n  def say_hello\n    puts \"Woof! My name is #{@name}.\"\n  end\nend\n\n```\n\nthis code defines a Dog class with two methods\n\n- the `#initialize` method initializies a new dog object.  It does this by taking the argument passed into it and assigning it the the instance variable `@name`\n- \n"
    }
  ]
}