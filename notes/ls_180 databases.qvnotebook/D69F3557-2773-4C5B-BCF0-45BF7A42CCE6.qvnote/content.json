{
  "title": "Ls 180: study guide",
  "cells": [
    {
      "type": "markdown",
      "data": "*NEEED HAVING*\n\n- a *relation* is usually another way to say \"table\".\n- a *relationship* is an association between the data stored in those relations.\n\n|*Term* | *Definition* |\n|--|--|\n| Relational Database |  A structured collection of data that follows the **relational model**. |\n| RDBMS |  Relational Database Management System.  A software application for managing relational databses, such as PostgreSQL. |\n| Relation | A set of individual but related data entries; analogous to a database table |\n|SQL |  Structured Query Language.  The language used by RDBMSs.|\n|SQL statement |  A SQL command used ot access/use the database or the data within the database via the SQL language. |\n|SQL query|  A subset of a \"SQe:L statement\".  A query is a way to serach, or lookup data within a database, as opposed to updating or changing data.|\n\n### Constraints\n\nIn general, `NOT NULL` is always a column constraint.  The remaining constraints (`PRIMARY KEY`, `FOREIGN KEY`, `UNIQUE`, and `CHECK`) can be either table or columns constraints.  The `CREATE TABLE` command lets you define both column and table constraints, while most other commands (like `ALTER TABLE`) only let you work with table constraints or `NOT NULL`.  (You can also add column constraints when defining a new column in an existing table). \n\n\n## SQL\n### []- idenitfy the different types of `JOINS` and explian their differences.\n\n|JOIN TYPE | NOTES|\n|--|--|\n|`INNER`| combines rows from tow tables whenver the join condition is met, this can just be made by `JOIN`|\n|`LEFT`| Same as an inner join, except rows form the first table are added to the join table, regardless of the evaulation of the join condition.|\n|`RIGHT`| same as inner join, except rwos from the second table are added to the join table, regardless of the evaulation of the join condition|\n|`FULL`|  A combination of Left join and right join|\n|`CROSS`|  Doesn't use a join condition.  The join table is th eresult of matching every row from the first table with the second table, the cross product of all rows acrosss both tables|\n\n#### INNER JOIN\n\nAN `INNER JOIN` (`JOIN`) returns a result set that contains the common elements for the tables, i.e. the inersection where they match on the joined condition.  INNER JOINS are the most frequently used JOINS.\n\nexample of `INNER JOIN`\n\n```\nSELECT users.*, addresses.*\n\nFROM users\nINNER JOIN addresses\nON (users.id = addresses.user_id)\n```\n\n#### LEFT JOIN\n\nA LEFT JOIN or LEFT OUTER JOIN takes all the rows form on table defined as the `LEFT` table, and joins it with a second table.  THe `JOIN` is based on the conditions supplied in parentheses. A `LEFT JOIN` will always include the rows from the `LEFT` table, even if there are not matching rows in the table it is joined with. \n\n```\nSELECT users.*, addresses.*\nFROM users\nLEFT JOIN addresses\nON (users.id = addresses.user_id);\n```\n\n![Screen Shot 2021-01-07 at 2.05.35 PM.png](quiver-image-url/79748946B18A462F94D43B9BB889520F.png =451x112)\n\n\n#### RIGHT JOIN\n\nA `RIGHT JOIN` is similar to a `LEFT JOIN` except that the roles between the two tables are reversed and all the rows on the second table are included alogn with any matching rows from the first table. \n\n![Screen Shot 2021-01-07 at 2.06.23 PM.png](quiver-image-url/9434492E7CBE8F67AD009B76B778318E.png =453x108)\n\n####FULL JOIN \n\nA `FULL JOIN` or `FULL OUTER JOIN` is essentially a combination of `LEFT JOIN` and `RIGHT JOIN`.  This type of join contains all of the rows form both of the table.s  WErhe the join condition is met, the rows of the two tables are joined, just as in the previous examples we've seen. For any rows on either side of the join where the join condition i9s not met, the columns for hte other table have `NULL` values for that row. \n\n####CROSS JOIN \n\nA `CROSS JOIN` also known as a Cartesian JOIN, returns all rows from one table crossed with every row from the second table. \n\n![Screen Shot 2021-01-07 at 2.20.28 PM.png](quiver-image-url/C1E92DF692FF75649CFCCBB13103111C.png =447x257)\n\n####Multiple Joins\n\nIt is possible, to join more than just two tables together.  This is done by adding additional `JOIN` clauses to your `SELECT` statements.  TO join multiple tables in this way, there must be a logical relationship between the tables invovled. \n\nEXAMPLE: \n\n```\nSELECT users.full_name, books.title, checkouts.checkout_date FROM users\nINNER JOIN checkouts ON (users.id = checkouts.user_id)\nINNER JOIN books on (books.id = checkouts.book_id);\n```\n\n### []- Name and define the three sublanguages of SQL and be able to classify different statements by sublanguage.\n\n| sub-language | controls | SQL Constructs|\n|--|--|--|\n|DDL or data definition language| relation structure and rules | `CREATE`, `DROP`, `ALTER`|\n|DML or data manipulation language | values stored within relations |  `SELECT`, `INSERT`, `UPDATE`, `DELETE`|\n|*DCL* or data control language | who can do what | `GRANT`|\n\nThe Data Definition Language (DDL) componente of SQL is used to create, modify, and dlete databases and tables; the DDL is responsible for describing how data is structure, common SQL DDL statments include: `CREATE`, `ALTER`, `DROP`\n\nThe Data manipulaiton Language (DML) component of SQL is used to create, read, update, and delte the actual data in a database.  Common SQL DML statments include:\n\n```\nSELECT\nINSERT\nUPDATE\nDELETE\n```\nData Contorl Language (DCL) component of SQL is used to control access to a database; its is responsible for defining th erights an roles granted to individual users: SQL commands include `GRANT, REVOKE`\n\n\n### []-WRITE sQL statments using INSERT, UPDATE, DELETE, CREATE/ALTER/DROP TABLE, ADD/ALTER/DROP COLUMN.\n\n#### DML\n\n##### INSERT (DML)\n\n```\nINSERT INTO table_name (column1_name, column2_name)  VALUES (data_for_column1, data_for_column2 ); \n```\n\n##### UPDATE \n\n```\nUPDATE table_name SET [column_name1 = value1, ...] WHERE (expression);\n```\n\n```\nUPDATE birds SET specires = 'Raven' WHERE species = 'Crow';\n```\n\nupdate all rows\n\n```\nUPDATE users SET enabled = false;\n```\n##### DELETE\n\n```\nDELETE FROM table_name WHERE (expression);\n```\n\ndelete all rows\n\n```\nDELETE FROM users;\n```\n\n####DDL\n\n|*SQL Statment*|*NOTES*|\n|--|--|\n|CREATE DATABASE sql_book| creates a new database called sql_book|\n|DROP DATABASE my_database | permanently declets the database named *my_database and all its data|\n\n#####CREATE\n\n```\nsql_book=#  CREATE DATABASE users;\n```\n\n```\nCREATE TABLE users (\n  id serial UNIQUE NOT NULL,\n  username char(25),\n  enabled boolean DEFAULT TRUE\n  );\n```\n  \n#####ALTER\n\n\nThese update existing data in a database table\n\n|Action | Command | Notes|\n|--|--|--|\n|Add a column to a table| ALTER TABLE table_name ADD COLUMN column_name data_type CONSTRAINTS | Alters a table by adding a column with a specified data type and optional constraints|\n|Alter a column's data type |  ALTER TABLE table_name ALTER COLUMN column_name TYPE data_type; | |\n| Rename a  tabel | ALTER TABLE table_name RENAME TO new_table_name: | changes the name of a table in the currently connected to database|\n|Rename a column within a table|  ALTER TABLE table_name RENAME COLUMN column_name TO new_column_name; | Renames a column of the specified table.|\n|Add a column constraint (NOT NULL) |  ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL; |  Adds a sepcified contstraint to the specified table column |\n|Add table constraint |  ALTER TABLE table_name ADD CONSTRAAINT constraint_name constraint_clause;   Or if you don't want to specify a constraint name:  ALTER TABLE table_name ADD constraint_clause;|  ALTER TABLE films ADD CONSTRAINT title_unique UNIQUE (title); |\n|Remove a table constraint |  ALTER TABLE table_name DROP CONSTRAINT constraint_name; | |Removes a constraint from the specified table |\n|Removes a column constraint| ALTER TABLE table_name ALTER COLUMN column_name DROP CONSTRAINT; |  REmoves a constraint from the specified column.  This syntax is necessary for 'NOT NULL' constraints which aren't specifically named|\n|Remove a column from a table | ALTER TABLE table_name DROP COLUMN column_name; | Removes a column from the specified table|\n|Delete a table from the database |  DROP TABLE table_name; | Permanenetly deletes the sepcified table from its databse|\n|add a check | ALTER TABLE table_name ADD CHECK (expression); | adds a constraint ot table_name that prevents new rows from being added if they don't pass a `check` based on specified expression|\n|ALTER TABLE unique\n\n\n\n### []- Understand how to use GROUP BY, ORDER BY, WHERE And HAVING.\n\n#### GROUP BY\n\nExample\n\n```\nSELECT genre, ROUND(AVG(duration)) AS average_duration FROM films GROUP BY genre\n```\n\n#### ORDER BY\n\nyou can follow by ASC DESC, ASC is the default\n\n```\nSELECT year / 10 * 10 as decade, ROUND(AVG(duration)) as average_duration FROM films GROUP BY decade ORDER BY decade;\n```\n\n#### WHERE\n\n```\nSELECT * FROM films WEHRE director LIKE 'John %'; \n```\n\n#### HAVING\n\n```\nSELECT\n  column 1, aggregate_function (column2)\nFROM\n    table_name\nGROUP BY\n  column 1\nHAVING\n  condition;\n\n```\n\n|*Opertor* | *Description* |\n|--|--|\n|`<` | less than |\n| `>` | greater than |\n| `<=` | less than or equal to |\n| `>=` | greater than or equal to |\n|`=` | equal |\n| `<>` or `!=` | not equal |\n\nAs well as the comparision operators listed above, there are what is termed **comparision predicates** which behave much as operators but have special syntax.  Examples include `BETWEEN`, `NOT BETWEEN`, `IS DISTINCT FROM`, `IS NOT DISTINCT FROM`, `IS NULL`, `IS NOT NULL`. \n\nLogical Operators:  logical operators can be used to provide more flexibility to your expressions.  There are three logical operators:  `AND`, `OR`, `NOT`\n\nString matching operattors;\n\n``` SELECT * FROM users WHERE full_name LIKE `%Smith` ```\n\n`LIKE` is case senstivie: `LIKE %Smith` matchs `Smith` but not `smith` or `SMITH`.  If you want a case insensitive selection, you can use `ILIKE %Smith`.\n\nAs well as the `%` character, the underscore `_` can also be used as a wildcard with `LIKE` and `ILIKE`.  However, `_` stands in for ony a single character whearas `%` stands in for any number of characters. \n\n#### LIMIT/OFFSET\n\nexample:\n\n``` sql_book=# SELECT * FROM users LIMIT 1 OFFSET 1;``` \n\n### DISTINCT\n\nexample\n\n```sql_book=# SELECT DISTINCT full_name FROM users;```\n\n\n### GROUP BY/ HAVING\n*ROWS are divided into groups* \n\nIf the query includes a `GROUP BY` clause, the remaining rows are divided into the appropriate groups\n\n**Groups are filtered using `HAVING` condition\n\n`HAVING` conditions are very similar to `WHERE` conditions, only they are applied to the values that are used to create groups and not individual rows.  This means that a column that is mentioned in a `HAVING` clause should amost always appear in a `GROUP BY`  clause and/or an aggreagte funciton in the same query.  BOth `GROUP BY` and aggregate functions perform grouping, and the `HAVING` clause is used to fileter that aggregated/grouped data.\n\n\n### []- Be familiar with using subqueries: \n\na subquery is a nested query. example below:\n\n```\nSELECT title FROM books WHERE author_id = (SELECT id FROM authoers WHERE name = 'William Gibson');\n```\nThe `Outer` query uses the value in the `WHERE` condition and so effectively becomes this:\n\n```\nSELECT title FROM books WHERE author_id =1; \n```\n##### Subquery expressions\n\n###### Exists\n\n`Exists` effecitvely checks whether any rows at all are returned by the nested query.  If at least one row is returned then the result of `EXISTS` is true, otherwist it is `false`.\n\n```\nmy_books=# SELECT 1 WHERE EXISTS (SELECT id from books WHERE isbn = '891839091980198');\n\n?column?\n----------\n    1\n(1 row)\n```\n####### IN\n\n`IN` compares an evaluated expression to every row in the subquery result.  If a row equal to the evaulated epression is found, then the result of `IN` is 'true', other it is 'false'.\n\nExample:\n\n```\nmy_books=# SELECT name FROM authoers WHERE id IN (SELECT author_id FROM books WHERE title LIK 'the%');\n\nname\n--------------------\nIain M. Banks\nPhilp K. Dick\n```\n\n\nHere, the nest query returns a list of `author_id` with avlues (2, 3) from the `books` table where the `tittle` of the book fo rthe row starts with `The`.  The outer query that returns the `name` value from any row of the `authors` table, where the `id` for that row is in the reuslt form the nested query.\n\n###### NOT IN\n\n`NOT IN` is similar to `IN` except that the result of `NOT IN` is `true` if an equl row is not found, and 'false' otherwise.\n\nexample:\n\n```\nmy_books=# SELECT name FROM authoers WHERE id NOT IN\nmy_books-#  (SELECT author_id FROM books WHERE title LIKE 'The%');\n      name\n-------------------\nWIlliam Gibson\n(1 row)\n```\nHere, the nested array agin returns a list of `author_id` values`(2, 3)` from the `books` table where the `title` of the book for the row starts with `The`.  The outer query then returns the `name` value from any row of the `authors` table, where the `id` is not in results from the nested query.\n\n###### ANY/SOME\n\n`ANY` and `SOME` are synonyms, and can be used interchangeably.  these expressions are used along wiht and operator (e.g. `=`, `<`,`>`, etc). The result of `ANY`/`SOME` is 'true' if any true result is obtained when the expresion to the left of the operator is evaulated using that operator against the reuslt of the nested query.\n\n```\n#my_books=# SELECT  name FROM authors WHERE length(name) > ANY\n(SELECT length(title) FROM books WHERE title LIKE 'The%');\n     name\n--------------------\nWilliam Gibson\nPhilp K. Dick\n(2 rows)\n```\n\nHere, the nested query returns the string length of any book `title` starting with `The`, `(20,13)`.  The outer query then returns the `name` of any author where the length of `name` is greater than **any** of the results from the nested query. Two of the author names are 14 characters in length so satisfy the condition since they are greater in length than at least one of the tiltle lengths(13) form the result so fhte nested query. \n\nNot when the `=` operator is used with `ANY/SOME` this is equavlent to `IN`.\n\n###### ALL\n\nAs with `ANY`/`SOME`, `ALL` is used along with an operator.  THe result of `ALL` is true only if *all* of the resuts are ture when the expression to the left of the operator is evaluated using the operator agaisnt he results of the nested query. \n\nExample:\n\n```\nmy_books=# SELECT name FROM authors WHERE length(name) > ALL (SELECT lenght(title) FROM books WHERE title LIKE 'THE%');\nname\n---------\n(0 rows)\n\n```\n\nHere, the nested query again returns the string length of any book `title` starting with `The`, `(20,13)`.  The outer query then returns the `name` of any author where the length of `name` is greater than all of the results from the nested query.  On this occaison no results are returend by the outer query, since the lenghts of the authoers names would need to be greater than *all* of the lengths `(20,13)` in order to staisfy the condition\n\nNOte: when the `<>`/`!=` operator is used with `ALL` this is equivalent to `NOT IN`.\n\n## PostgreSQL\n\n###[]- Describe what a sequence is and what they are used for.\n\nIt turns out the serial columns in PostgreSQL are actually a shorthand for a column defintion that is much longer:\n\n```\n---This statement: ---\nCREATE TABLE colors (id serial, nae=me text);\n\n-- is actually interpreted as if it were this:\nCREATE SEQUENCE colors_id_seq;\nCREATE TABLE colors (\n  id integer NOT NULL DEFAULT nextval('colors_id_seq'),\n  name text\n); \n```\n\na sequence is a special kind of relation that generates a series of numbers.  A sequence will remember the last number is generated, so it will generate numbers in a predetermined sequence automatically. \n\nyou can see from the expanded example above that the sequence's value is used as the `id` column's default value.  The next value of a sequence is accessed using `nextval` and can be done in any SQL statement:\n\n```\n\nsql-course=# SELECT nextval('colors_id_seq');\n  nextval\n------------\n     4\n(1 row) \n\n```\n\nOnce a number is returned by `nextval` for a standard sequence, it will not be returned again, regardless of wheter the value was stored in a row or not.  If we insert another row into the colors table, the `id` value for the rwo will skip `4` and move on to the next value in the sequence:\n\n```\nsql-course=# INSERT INTO colors (name) VALUES\n  ('yellow');\nINSERT 0 1\nsql-course=# SELECT * FROM colors;\n id |  name\n----+--------\n  1 | red\n  2 | green\n  3 | blue\n  5 | yellow\n(4 rows)\n\n```\n\n\n###[]- Create an auto-incrementing column. \n\n*serial* go back to this to break down to `nextval` etc.\n\n**serial** columns in PostgreSQL are actually a short hand for a column definition tht is much longer:\n\n```\n--- This statement: ---\nCREATE TABLE colors (id serial, name text);\n\n-- is actually interpreted as if it were this one:\nCREATE SEQUENCE colors_id_sq;\nCREATE TABLE colors (\n  id integer NOT NULL DEFAULT nextval nextval('colors_id_seq'),\n  name text\n);\n```\n\n# YOU NEED TO FIND MORE DEFINE DEFUALT EXAMPLES\n\n###[]- Define default value for a column.\n\n\nWhen creating a table you can define a default value in the following way.\n\n```\nsql_book=# CREATE TABLE users ( \n  id serial UNIQUE NOT NULL,\n  username char(20),\n  enabled boolean DEFAULT TRUE\n);\n```\nYou can add a default value into a pre-existing table by doing the following. \n\n```\nALTER TABLE employees ALTER COLUMN vacation_remaining SET DEFAULT 0;\n\n```\n\ndropping a default \n\n```\nsql_book-# ALTER TABLE all_users \nsql_book-# ALTER COLUMN id DROP DEFAULT;\n```\n\n###[]- Be able to describe what primary, foreign, natural, and surrogate keys are.\n\n#### surrogate key\n\nA **surrogate key** is a value tht is created solely for the prupose of identifying a row of data in a database table. Because it is created specifically for that purpose, it can avoid many of the problmes associated with natural keys.\n\nPerhaps the most common surrogate key is use today is an autoincrementing integer.  This is a values that is added to each row in a table as it is created.  With each row this value increases in order to remain unique in each row.\n\nhere is an example:\n\n```\nCREATE TABLE colors (id serial, name text);\n```\n\nit's common to call the surrogate key created for a table **id**(short of *identifier*).\n\n####primary key\n\nA *Primary Key* is a unique identifier for a row of data.  \n\nIn order to act as a unique identifier a column must contain some data, and that data should be unique to each row.\n\n`PRIMARY KEY` is the same as adding a `UNIQUE` and a `NOT Null` constraint to a column. \n\n#### FOREIGN Keys\n\nA Foreign Key allows us to associate a row in one table to a a row in another table.  This is done by setting a column in one table as a Foreign Key and having that column reference another table's Primary Key column.\n\n```FOREIGN KEY (fk_col_name) REFERENCES target_table_name (pk_col_name)```\n\nThe specific way in which a Foreign Key is used as part of a table's schema depends on the type of realtionship we want to define between our tables.  In order to implement that schema correctly it is useful to formally describe the relationships we need to model between our entities:\n\n1. A User can have ONE address. An address has only ONE user. (one-to-one)\n2. A review can only be about ONE Book.  A Book can have MANY review.  (one-to-many).\n3. A User can have Many books that he/she may have checked out or returned.  a Book can be/have  been checked out by Many users (many-to-many). \n\n#### natural key\n\nA natural key is an existing value in a dataset that can be used to uniquely identify each row of data in that dataset.  On the surface there appear to be a lot of values that might be satisfactory for this use:  a person's phone numer, email addreees, social secureity number, or a product umber.\n\nHowever, in reality most values that seem likey they are good candidates for natural keys turn out to not be.  A phone number and email address can change hands.  A social security number shouldn't change but only some pople have them. And prodcuts often go through multiple revisions while retaining the same product number.\n\nThere are a varity of solutions to these problems, including using more than one existing value together as a **composite key**. But instead of solving the problems associated with natural keys, this will often just defer the problem until later without actually addressing it. \n\n\n\n###[]- Create and remove CHECK constrains from a column.\n\nwhile creating a table\n\n```\nCREATE TABLE employees (\n  id serial PIMARKY KEY,\n  first_name VARCHAR (50),\n  last_name VARCHAR (50),\n  birth_date DATE CHECK (birth_date > '1900-01-01'),\n  joined_date DATE CHECK (joined_date > birth_date),\n  salary numeric CHECK (salary > 0)\n);\n\n```\n\nadding check to a prexisting table\n\n```\nALTER TABLE table_name\nADD CHECK(expression);\n```\n\nanother syntax for addding a check to a pre-existing table\n\n```\nALTER TABLE table_name\nADD CONSTRAINT check_name CHECK (expression);\n\n```\n\n\n###[]- Create and remove foreign key constraints from a column\n\nsimultaneously with the creation of a table you can add a foreign key in two ways.  At the bottonw of the table you can do the following\n\n```FOREIGN KEY (fk_col_name) REFERENCES target_table_name (pk_col_name)```\n\ninline with a column information you can do \n\n```\nCREATE TABLE table(\n  id serial PRIMARY KEYl\n  other_id int REFERENCES other_table(pk_col_name)\n);\n```\n\nAfter creating on a table you can declare a pre-existing column a Foreign Key like such:\n\n```\nALTER TABLE child_table\nADD CONSTRAINT constraint_name\nFOREIGN KEY (fk_columns)\nREFERENCES parent_table (parent_key_columns);\n```\n\nREMOVING a foreign key: \n\n```\nALTER TABLE child_table\nDROP CONSTRAINT constraint_fkey\n```\nwhen you add a foreign key constraint with `ON DELETE CASCADE` option to an existing table, you need to follow these steps:\n\nfirst drop existing foreign keys:\n\n```\nALTER TABLE child_table\nDROP CONSTRAINT constraint_fkey;\n```\n\nThen add a new foreign key constaint with `ON DELETE CASCADE` action:\n\n```\nALTER TABLE child_table\nADD CONSTRAINT constraint_fk\nFOREIN KEY (fk_columns)\nREFERENCES parent_table(parent_key_columns)\nON DELETE CASCADE; \n```\n\n## Database Diagrams\n\n**relational databases** are called relational because they persist data in a set of **relations** or they are more commonly called, tables. \n\nA **relationship** is a connection between entity instances, or rows of data, usually resulting form what these rows of data represent.\n\n\n###[]- Talk about the different levels of schema\n\n*Schema* is concerned with the *structure* of a databse.  This structure is defined by things such as the names of tables and table columns, the data types of those columns and any constraints they may have. \n\n*Data* is concerned with the **strucuture** of a database.  This structure is defined by things such as the names of tables and tabel columns, the data types of those columns and any contstraints that they may have. \n\nThe three levels of schema are **conceptual**, **logical** and **physical**. \n\n**conceptual schema** High-level design focused on identifying entities and their relationships.  **entity relationship** model (diagram) (erd)\n\n**physical schema** low-level database-specific design focused on implementation. \n\nbelow is an example of a conceptual schema (using crow's foot notation) on the left, and a phsyical schema on the right. \n\n![Screen Shot 2021-01-07 at 12.15.15 PM.png](quiver-image-url/C8D3E41CEEE3BFD274695E3A10EAC6BD.png =643x322)\n\n\n\n\n###[]- Define cardinality and modality \n\n*cardinality* is the number of objects on each side of the relationship\n(1:1, 1:M, M:M)\n\n*modality* of a relationship indicates if that relationship is required (1) or not (0).\n\nmodality is represented in a diagram like this:\n\n![Screen Shot 2021-01-07 at 12.30.35 PM.png](quiver-image-url/4E0CC7325E2FF4725E4A9EFC30AB18E6.png =432x194)\n\nbelow is an example of a conceptual schema using modality. which shows that a books has to have an author and an author has to have at least one book.  It then says that a category can have 0 or more books and a book can be in 0 or more categories (its optional). a seat can belong to on and only one section (required), and a section must have 1 or more seats (required).  \n\n\n![Screen Shot 2021-01-07 at 12.32.05 PM.png](quiver-image-url/46581FAFA5C4C82A644EA5D567D6C6F2.png =395x247)\n\nLooking at the diagram below, a TICKET must have 1 (and only one) customer (required) and \n\n![Screen Shot 2021-01-07 at 12.42.38 PM.png](quiver-image-url/673B113939B872A179B64EA474ED64A3.png =442x259)\n\n*Refrential Integrity* is data that requires all refrences to be valid.  That is if a value in a column references a value in another column (usually in another table), then that value must exist in the referenced column.  But a customer can have 0- many tickets (optional).  A ticket can belong to 1 and only one event (required) an event can have 0 or more tickets (optional).  A ticket can have one and only one seat. and a Seat can have 0 or more tickets (optional). \n\n\n###[]- Be able to draw databse diagrams using crow's foot notation\n\nsee above\n\n### some useful tidbits\n\n|*DATA TYPE*|*TYPE| *VALUE*| EXAMPLE VALUES* |\n|--|--|--|\n|varcah(lenght) | character | up to `length` characters of text | `canoe`|\n|`text`|character| unlimited length of tet | `a long string of text`|\n|`integer` | numeric | whole numbers | `42`, `-1423290`|\n|`real`| numeric | floating-point numbers | `24.563`, `-14924.3515`|\n|decimal(precision, scale) | numeric | arbitrary precision| `123.45`, `-567.89`|\n|`timestamp` | date/time | date and time | `1999-01-08 04:05:06`|\n|date | date/time | ony a date | `1999-01-08` |\n|`boolean` | boolean | treu or false | `true`, `false`|\n\n|*function*|*example*|*notes*|\n|`date_part` | `SELECT full_name, date_part('year', last_login) FROM users;` |  `date_part` allow us to view a table that only contains a part of a user's timesatmp that we sepcify. The above query allows us to see weach user's name along with the year of the `last_login` date. |\n| `age` | `SELECT full_name, age(last_login) FROM users;` | THe `age` function, when passed a single `timestamp` as an argument caculates the time elapsed between the timestamp and th current time.  The above query allows us to see how long it has been since each user last logged in.|\n\n*aggregate functions*\n\n|*fucntion*|*example*|*notes*|\n|`count` | `SELECT count(id) FROM users;` | Retruns the number of values in the column passed in as an argument.|\n|`sum` | SELECT sum(id) FROM users; | Not to be confused with `count`.  this sums numeric type vaues for all of the selcted rows and returns the total. |\n|`min` | `SELECT min(last_login) FROM users;` | This returns the lowest value in a column for all the selected rows.  Can be used with vrious data types such as numeric, date/time and string. |\n|`Max` | `SELECT max(last_login) FROM users; |  opposite of min |\n|`avg` | `SELECT avg(id) FROM users;` | takes mean|\n\n\n- `NULL` is a special value that represents the absence of any other value.\n- `NULL` values must be compared using `IS NULL` or `IS NOT NULL`.\n- Database dumps can be loaded using `psql -d database_name < /path/file_to_import.sql`.\n- table columns can have default values, which are specified using `SET DEFUALT`\n\n- Table columns can be disallowed from storing NULL values using `SET NOT NULL`\n- `CHECK` constraints are rules that must be met by the data stored in a table. \n- A **natural key** is an existing value in a dataset that can be used to uniquely idenfity each row of data in that dataset.\n- a **surrogate key** is a value that is created solely for the purpose of identifying a row of data in a database table. \n- A *primary key* is a value that is used to uniquely indefnityf the rows in a table.  It cannot be `NULL` and must be unique within a table.  They are created using `PRIMARY KEY`\n\n- `serial` columns are typically used to create auto-incrementing columns in PostgreSQL.\n- `AS` is used to rename tbles an columns within a SQL statement. \n- \n\n\n*NOTE ABOUT NULL* when `NULL` value appears to either side of any ordinary comparison operator (such as `=`, `<`, `>=`) the operator will return `NULL` instead of `true` or `false`.\n\n```\n\nsql-course=# SELECT NULL;\n ?column?\n----------\n\n(1 row)\n```\n\nWhen dealing with `NULL`  values, *always* use the `IS NULL` or `IS NOT NUll` constructs:\n\n```\nsql-course=# SELECT NULL IS NULL;\n?column?\n--------\n  t\n(1 row)\n\nsql-course=# SELECT NULL IS NOT NULL;\n?column?\n---------\n f\n(1 row)\n\n```\n\n### INDEXES\n\nwhen you define a `PRIMARY KEY` constraint or a `UNIQUE` constraint, on a column you automatically creat an index on that column. \n\npsql uses B-tree by default for indexes, and is the only type availabel for unique indexes.\n\nTo explicitly add an index to a table:\n\n```\nCREATE INDEX index_name ON table_name (field_name); \n```\n\n```\nCREATE INDEX ON books (author_id);\n```\n\nto delte an index\n\n```\nDROP INDEX books_author_id_idx;\nDROP INDEX\n```\n\n### CREATE TYPE\n\n```\nALTER TABLE stars\nDROP CONSTRAINT stars_spectral_type_check;\n\nCREATE TYPE spectral_type_enum AS ENUM ('O', 'B', 'A', 'F', 'G', 'K', 'M');\n\nALTER TABLE stars\nALTER COLUMN spectral_type TYPE spectral_type_enum Using spectral_type::spectral_type_enum;\n```\n\ndump\n\npg_dump --inserts database_name > database_name.dump.sql\n\n\nEXAMPLE of a subquery\n\n```\nSELECT MAX(bid_counts.count) FROM\n  (SELECT COUNT(bidder_id) FROM bids GROUP BY bidder_id) AS bid_counts;\n```\n\nanother subquery\n\n```\nSELECT name,\n  (SELECT COUNT(item_id) FROM bids WHERE item_id = items.id)\nFROM items;\n```\n\nanother ONe with ROW\n\n```\nSELECT id FROM items\nWHERE ROW('Painting', 100.00, 250.00) = ROW(name, initila_price, sales_price);\n```"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}