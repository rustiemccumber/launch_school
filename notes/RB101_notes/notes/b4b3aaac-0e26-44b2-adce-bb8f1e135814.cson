createdAt: "2019-12-19T18:56:57.078Z"
updatedAt: "2019-12-19T20:41:55.456Z"
type: "MARKDOWN_NOTE"
folder: "1fd0102d12b0906a03d9"
title: "Study Guide RB101"
tags: []
content: '''
  #### Study Guide RB101
  
  Be able to explain clearly the following topics:
  
  - local variable scope, especially how local variables interact with method invocations with blocks and method definitions
  
  - how passing an object into a method definition can or cannot permanently change the object
  
  - working with collections (Array, Hash, String), and popular collection methods (each, map, select, etc).  Review the two lessons on these topics thoroughly.
  
  - variables as pointers
  
  - puts vs return
  
  - false vs nil and the idea of "truthiness"
  
  - method definition and method invocation
  
  - implicit return value of method invocations and blocks
  
  These questions will test your knowledge on more than one level
  
  1. ability to parse code and decribe precisely, or knowledge of ruby language specifics
  
  3. understanding of underlying principle: either specific to ruby, or general cs
  
  describe codes such as below with great precision 
  ```ruby
  greeting = 'Hello'
  
  loop do
    greeting = 'Hi'
    break
  end
  
  puts greeting
  ``` 
  <details>
  <summary>Example Description</summary>
  <p>
  
  in line one the local variable ```greeting``` is initialized and assigned that string object variable with the value of ```'Hello'```.
  
  The ```do..end``` incombination with the loop method invocation lines 3 to 6 defines a block. In this blook greeting is reassigned to String object 'Hi'. the puts method is called on line 8 with the local variable ```greeting``` passed to it. 
  
  Since the ```greeting``` variable is now assigned to ```'hi'```, that is what is output. This is example illustrates local variable scoping rules in ruby, and variables within side the block have access to variables initialized outside the block.
  
  <p>
  </details>
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
