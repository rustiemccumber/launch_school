{
  "title": "REGEX Notes (Launch School Introduction to Regex book)",
  "cells": [
    {
      "type": "markdown",
      "data": "###Basic Matching \n\nAt their most basic, regex are strings of characters between two `/` characters, e.g., At their most basic, regex are strings of characters between two `/` characters, e.g., `/cat/`\n - `/cat/` matches the string 'cat' anywhere it is found in the text. Even in 'catolog', 'scat' etc.\n\nUse `Rubular` to test Regex \n\n\n<details><summary> Special Characters </summary>\n\n\n`$ ^ * + ? . ( ) [ ] { } | \\ /` have special meaning in ruby and are referred to as `meta-characters`\n\nif you want to match a meta-character you must escape it with a leading backslash `\\`, (ex. `/\\?/`).\n\nmeta characters have a meta meaning `()` is `grouping`, `|` is `or`. If you want to match the literal characters you escape before\n</details>\n\n<details><summary> Commonly used </summary>\n\n`:` is not a special character so `/:/`\n`' '`: space must be represented by `/[ ]/`\n</details>\n\n<details><summary> Concatenation </summary>\n\ncan do something like `/cat/` and it will match any string that has `c` followed by `a` follow by `t`\n</details>\n\n<details><summary> Alternation </summary>\n\nalternation: a simple way to construct a regex so that it matches one of several patterns\n\nex: \n\n`/(cat|dog|rabbit)/` will match `cat`, `dog` or `rabbit` anywhere it appears in the string. \n\n</details>\n\n<details><summary> Control character escapes </summary>\n\n`\\n` line feed\n`\\r` carriage return \n`\\t` tabs \n\nNote that not everything that looks like a control character escape is a genuine control character escape. For instance:\n\n`\\s` and `\\d` are special character classes (we'll cover these later)\n`\\A` and `\\z` are anchors (we'll cover these as well)\n`\\x` and `\\u` are specials character code markers (we won't cover these)\n`\\y` and `\\q` have no special meaning at all\n\n</details>\n\n\n\n<details><summary> ignoring cases </summary>\n\nif you want to ignore case of letters (upper, lower) and match any case append `i` to closing `/`\n\n`/launch/i`\n\nwill match `Launch`, `LAUNCH` etc. \n\n</details>\n\n### Character Classes \n\nPatterns which let you specify a set of characters you want to match.\n\n<details><summary> set of characters </summary>\n\ncharacter classes use a list of characters between square brackets ex: `/[abc]/`  Such patterns will match a single occurance of any of the characters between the brackets. \n\nyou can concantenate with character class.  \n`/[abc][12]/`, this matches any two characters where the first is `a`, `b` or `c` and the second is `1` or `2`.\n\nmeta characters within character class include:\n\n`^ \\ - [ ]`\n\nYou can escape any of the special characters, even if you don't have to. Thus, `/[\\*\\+]/` is an acceptable, albeit less readable, equivalent to `/[*+]/`. As before, though, you should keep this list of class meta-characters handy until you know it by heart.\n\n</details>\n\n<details><summary> Range of Characters</summary>\n\n`/[a-z]/` will match all lowercase letters\n`/[A-Za-z]/` will match all lowercase and uppercase letters\n\n</details>\n\n<details><summary> Negated Classes</summary>\n\n\nnegated characters look like ordinary character classes expect the first character between the brackets is a `^`\n\n`/[^y]/`\n\nadditionally you can negate multiple characters\n\n`/[^aeiou]/`\n\n</details>\n\n### Character Class Shortcuts\n\n<details><summary> Any character </summary>\n\n`/./` this will match any character \n</details>"
    }
  ]
}