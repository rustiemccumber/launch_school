{
  "title": "RB 101 Pracitce Test: Ryan Schaul copyÂ ",
  "cells": [
    {
      "type": "markdown",
      "data": "```ruby\na = [1, 2, 3, 3]\nb = a\nc = a.uniq\n```\n\n```ruby\ndef test(b)\n  b.map { |letter| \"I like the letter: #{letter}\" }\nend\n\na = ['a', 'b', 'c']\np test(a)\np a\n```\n\n```ruby\ndef test(b)\n  b.map! {|letter| \"I like the letter: #{letter}\" }\nend\n\na = ['a', 'b', 'c']\np test(a)\np a\n```\n\n```ruby\nmy_arr = [[18, 7], [3, 12]].each do |arr|\n  arr.each do |num|\n    if num > 5\n      puts num\n    end\n  end\nend\n```\n\n```ruby\nn = 10\n\n[1, 2, 3].each do |n|\n  puts n\nend\n\np n\n```\n\n```ruby\n[[1, 2], [3, 4]].map do |arr|\n  arr.map do |num|\n    num * 2\n  end\nend\n```\n\n```ruby\ndef fix(value)\n  value << 'xyz'\n  value = value.upcase\n  value.concat('!')\nend\ns = 'hello'\nt = fix(s)\n```\n\n```ruby\nn = 10\n\n1.times do |n|\n  n = 11\nend\n\nputs n\n```\n\n```ruby\na = \"hello\"\n\n[1, 2, 3].map do |num| \n  a \nend\n```\n\n```ruby\ndef change_name(name)\n  name = 'bob'\nend\n\nname = 'jim'\np change_name(name)\nputs name \n```\n\n```ruby\ndef add_name(arr, name)\n  arr = arr + [name]\nend\n\nnames = ['bob', 'kim']\np add_name(names, 'jim')\nputs names.inspect \n```\n\n```ruby\ndef add_name(arr, name)\n  arr = arr << name\nend\n\nnames = ['bob', 'kim']\np add_name(names, 'jim')\nputs names.inspect\n```\n\n```ruby\ndef increment(a)\n  a = a + 1\nend\n\nb = 3\np increment(b)\np b\n```\n\n```ruby\ndef append(s)\n  s << '*'\nend\n\nt = 'abc'\nputs append(t)    \nputs t \n```\n\n```ruby\ndef fix(value)\n  value.upcase!\n  value.concat('!')\n  value\nend\n\ns = 'hello'\nt = fix(s)\n\nputs s           \nputs t\n```\n\n```ruby\ndef fix(value)\n  value = value.upcase\n  value.concat('!')\nend\n\ns = 'hello'\nt = fix(s)\nputs s          \nputs t \n```\n\n```ruby\ns = 'Hello'\nputs s.object_id\ns += ' World'\nputs s          \nputs s.object_id \n```\n\n```ruby\ndef fix(value)\n  value[1] = 'x'\n  value\nend\n\ns = 'abc'\nt = fix(s)\np s            \np t  \n```\n\n```ruby\ndef tricky_method(a_string_param, an_array_param)\n  a_string_param += \"rutabaga\"\n  an_array_param << \"rutabaga\"\nend\n\nmy_string = \"pumpkins\"\nmy_array = [\"pumpkins\"]\ntricky_method(my_string, my_array)\n\nputs \"My string looks like this now: #{my_string}\"\nputs \"My array looks like this now: #{my_array}\"\n```\n\n```ruby\ngreetings = { a: 'hi' }\ninformal_greeting = greetings[:a]\ninformal_greeting << ' there'\n\nputs informal_greeting  \nputs greetings\n```\n\n```ruby\ngreetings = { a: 'hi' }\ninformal_greeting = {}\n\ngreetings.each { |key, value| informal_greeting[key] = value }\ninformal_greeting[:a] += ' there'\n\nputs informal_greeting\nputs greetings\n```\n\n```ruby\na = 7\narray = [1, 2, 3]\n\narray.each do |element|\n  a = element\nend\n\nputs a \n```\n\n```ruby\nfor i in (0..5) do \n  a = i\nend \n\nputs a\n```\n\n```ruby\ndef count_sheep\n  5.times do |sheep|\n    puts sheep\n    if sheep >= 2\n      return\n    end\n  end\nend\n\np count_sheep\n```\n\n```ruby\nreturn_value =  [1, 2, 3].select do |num|\n                  num + 1\n                end\np return_value\n```\n\n```ruby\nreturn_value =  [1, 2, 3].map do |num|\n                  num.odd?\n                end\np return_value\n\n```\n\n```ruby\nreturn_value =  [1, 2, 3].each_with_object([]) do |num, array|\n                  array << num if num.odd?\n                  puts array.inspect\n                end\np return_value\n```\n\n```ruby\ndef real_palindrome?(string)\n  string.downcase.delete!('^A-Za-z')\n  string\nend\n\np real_palindrome?(\"Madam, I'm Adam\")\n\n```\n\n```ruby\ndef test(b)\n  b.map { |letter| \"I like the letter: #{letter}\" }\nend\n\na = ['a', 'b', 'c']\np test(a)\np a\n\n```\n on `line 1-3` the method `test` is defined that takes one parameter `b`.\n \n On `line 5` the local variable `test` is initialized and the array object with value `['a', 'b', 'c']` is assigned to it. \n \n on `line 6` the `test` method is called with the local variable `a` passed to it as an argument.  The return value of this method call is then passed to the method  `p`.  `p` calls the method `inspect` on the object it is called on displaying a string containing a human-readable representation of the obj.\n \n  On `line 1` the variable ,`b`, local to the method defintion `test` is set to point to the same array object which is being referenced by the local variable `a`, with value `['a', 'b', 'c']`.\n  \n  on `line two` the non mutating method `map` is called on the value of variable `b` (and `a`). a `{..}` block is passed to the method as an argument with one parameter `letter`.  map iterates through the array and moves the output of the block into a new array, finally returning that array. in this case the output is `[\"I like the letter:'a'\",\"I like the letter: 'b'\", \"I like the letter: 'c'\"]`.\n \n `line 6` outputs the return value of the method `[\"I like the letter:'a'\",\"I like the letter: 'b'\", \"I like the letter: 'c'\"]` \n \non `line 7` the variable a is passed to `p` method as an argument. `p` calls the `inspect` method on the object it is called on, which returns a string containing a human-readable representation of the object. The `p` method then outputs this string. In this case p outputs `['a', 'b', 'c']` because map is non mutating. \n\n\n"
    }
  ]
}