{
  "title": "RB 101 Written Assesment: Canned lines",
  "cells": [
    {
      "type": "markdown",
      "data": "###General lines \n\nOn `line X` the variable `a` is initialized and the X object with value `X` is assigned to it. \n\n###Vocabulary to use\n\n- initialize\n- assign \n- referencing (i.e. points to) \n- reassigned\n- methods are defined with **parameters** but called wih **arguments**\n\n\n\n### Template for Method defintion\n\n(1) what `lines` the method definition spans.\n\n  - on `line 1-3` the method `change_name` is defined that takes one parameter `name`.\n\n(2) what variables are initialized \n\n- On `line x` the local variable `variable_name` is initialized and the string object with value `string` is assigned to it. \n\n- on `line X` the `method_name` method is called with the local variable `varible_ name` passed to it as an argument.  The return value of this method call is then passed to the method  `p`.  (description of what method does) `p` which calls the method `inspect` on the object it is called on displaying a string containing a human-readable representation of the obj. \n\n(3) assigning variables local to the method to point to the same as local variables. \n\n-  On `line 1` the variable ,`arr`, local to the method defintion `add_name` is set to point to the same array object which is being referenced by the local variable `names`, with value `[bob, kim]`.\n\n\n(4) what happens with in the method/block. IS THE VARIABLE MUTATED?  what is the return value of the block/method. \n\n(6) displayed\n\n - `line 6` outputs the return value of the method `abc*` and returns `nil` \n \n - on `line 7` the variable t is passed to `puts` as an argument. `puts` ouputs `abc*` and returns `nil`\n\n\n## Template for method call (NO DEFINITION) \n\n**(1) what variables are initialized**\n\n- On `line X` the variable `a` is initialized and the X object with value `X` is assigned to it. \n\n- (1) one `line A`  the local variable `B` is initialized and is assigned to the return value of the `C` method call  on the `Array` object with value `E`. \n\n**(2) what the method call is called on. **\n\n- (2) On `line A` the `map` method is called on array `[1, 2, 3]\n\n**(3)  what `lines` the block/methods span.**\n\n- (3) On `line A-Z` the `do..end` block is passed as an argument to the `C` method call with `one` parameter `PARAM`.  \n\n**(4) what happens with each line within the method/block. what is the return value of the method/block. ( `a` is accessible from within the block because it was initialized in outer scope.)**\n\n**(5) canned line about method method. **\n\n- (5) The `map` method iterates through the array, passing each element of the array to the block and assigning it to the variable `num`, with each iteration the return value of the block is the move into a new array and that new array is returned. \n\n- (5) The `each` method iterates through the array, passing each element of the array to the block and assigning it to the variable `num`. The `each` method returns the original value of the `Array`, it does not take into consideration the return value of the block. \n\n- (5) The `map!` method  modifies the current element of the original `array` object, replacing it with the return value of the block for each iteration.  when it finishes every iteration it returns the original, albiet modified, `array` with the return values of the block for each element). \n\n- (5) The `select` method considers the truthiness of the return value of the block.  If the return value of the block evaluates to `true` it takes the element and puts it in a new `array` and returns the `array` after each iteration. \n\n- (5) The `select!` method considers the truthiness of the return value of the block.  If return value of the block evaluates to `true`, the element of the current iteration of the `array` is maintained (not deleted) otherwise the element is removed from the array.  The original , albiet modified, `array` is returned after each iteration. \n\n**(6) return value of block/why? what the is output/why.**\n\n**(7) what the method outputs and why ** \n\n\n\n###Variable shadowing\n\nThe use of local variable `n` for the parameter of the `do..end` block creates *variable shadowing*.  Variable shadowing occurs when a parameter name of a block has the same name as a local variable which was initialized outside of the block. Variable shadowing prevents access to local variables of the same name outside of the block from within the block.\nSo on `line 5` we are assigning integer `5` to the local variable `n` passed in as a parameter of the `do..end` block. the value of the local variable `n` initiliaze in the outer block is uneffected, and remains `10`.\n\n###Each, Map and Select\n\n`Each` iterates through the Array object passing each element of the array to the block, then runs the block (outputting the value of parameter num) and when it finishes each iteration it returns the original array. The each method does not care about the return value of the block. \n\n\n`Map` iterates through array object, passing in each element of the array to the block, then runs the block. Map then takes the return value of the block and moves it to a new array, after every iteration it returns the new array with elements which were passed into it (return values of block of each iteration). \n\n`select` iterates throught the array object, passing each element of the array to the block and then runs the block. Select considers the truthiness of the return value of the block.  If the return value of the block evaluates to `true` it takes the element and puts it in a new array and returns the array after each iteration. \n\n`p` calls the `inspect` method on the object it is called on, which returns a string containing a human-readable representation of the object. The `p` method then outputs this string. \n\n`inspect` returns a string containing a human-readable represenation of the object it is called on. \n\n`puts`\n\n`times`"
    }
  ]
}