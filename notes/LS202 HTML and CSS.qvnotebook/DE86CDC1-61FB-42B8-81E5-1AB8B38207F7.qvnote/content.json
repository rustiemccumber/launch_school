{
  "title": "Images Lists and tables",
  "cells": [
    {
      "type": "markdown",
      "data": "\\#\\#\\#Image Types\n\n\\#\\#\\#\\#JPG\n\nTHe jpg formant is the most common format fo rimages used in web doucments. THey are suitable for photographs, drawings, diagrams and more. Almost all graphics programs can create jpgs, and most digital cameras today can produce them straight out of the camera, which lets you upload photos straight to the Web.\n\nJpgs provide an exceptional balance of image quality and compression. Compression encodes the file in a way that reduces its size. Jpgs us a \\*lossy\\* form of compression; they lose information in exchange for a file size reduction. In some cases, you can compresss and iamge down to 10% of its original size or less. However, lossiness sacrifices quality in return for compresssion.\n\nIf you edit a jpg, the resulting file has less detail than the original. If you update the file again, the result loses more detail. If you repeat this proces often enough, you can end up with an image that you no longer recognize. Even if you never eidt a jpg file, you can see some \\*JPEG artifacts\\* on close examinatin. However, most people don't notice these on well-handled jpgs, so they work well with most photographs.\n\nYOu can set the amount of compression and associated lossiness when you save a jpg file. Low lossiness levels lead to better image quality but larger files; likewise, high lossiness yields lower image quality but smaller files. As a rule of thumb, you should aim to reduce the size of the Jpg as much as possible without losing noticeable detail or introducing visible artifacts, which requires experimenation fo every image.\n\n\\#\\#\\#\\#PNG\n\nIn general, jpgs don't work well as CSS background images. Photographs are too intricate visually for use as a background, and most suitable non-photographic graphics show visible results of compression even at the highest quality. Thus, the png format is often the best choice fo backgrounds and non-photographic images. \n\nLike jpgs, pngs use compression to reduce the sie of the file, but png compression is no-lossy. However, the lack of lossiness means larger file sizes; considerably in some cases. \n\nPngs also provide both single-color and alpha transparency, which lets you see the background behind an image while still viewing the image's main subject. This feature is useful with logs, icons, and line drawings. Single-color transparency allows part of an image to be entirely clear by reserving a single color- any pixel that matches that color in the png reveals the content (tytpically a background color) behind the image. Alpha transparency adds an alpha channel to images, which allows up to 65,536 different levels of transparency tinted by color\n\nPngs are ideal for images that need all their detail, transparency or that must support more than 16.7 million colors.\n\n\\#\\#\\#GIF\n\nGifs are suitable for small images used as user interface icons in an application. They have a limited color range (256 colors), but this allows for minuscule file sizes, which makes them perfect for iamges wehre siz,e detail and broasdh color paletete arent' significant. \n\n![Screen Shot 2021-02-10 at 2.54.25 PM.png](quiver-image-url/05AA58744AF8879D1831758F92A437E7.png =817x666)\n\n\\#\\#\\#The Img Element\n\n`\\<img\\>` is a self-closing ta that tells the browser to load and display a foreground image from a separate resource. It has four attribues of particular interest:\n\n- The `src` attribute is required. It tells the browser where to find the image. It uses the same URL format as links in the `\\<a\\>` tag and can be relative, root-relative, or absolute. \n\n- The `alt` attribute is optional, but should almost always use it. It describes the content of the image as an aid for users who cannot see it or that have images disabled. If you have a picture of Da Vinci's smareter siter, Lucrezia, you should say so in the `alt` attribue value. Mos browsers display the `alt` text when an image is unavailabl or when images have been disabled.\n\nScreen readers, specialized browers that read web pages aloud for peopole with vision problems, use the `alt` attribute to tell the user about image content. Without `alt`, the user has no idea what th eimage shows. They may not even know it is presetn: Some reader software treats images with no `alt` text as non-essential, so they skip over them while reading the screen.\n\nSerach engines use `alt` to index images, which makes it relevant for search engine optimization (SEO).\n\nIf you omit the `alt` attribute, your browser can still render the image. Existing standards require the `alt` attribute in most cases to provide text that the browser can displlay when the image is unavailable. Your HTML won't vailade on the on the w3C validator unless you use the `alt` attribute. If you image isn't significant enough to require and `alt` attribute, you can specify and empty value with `alt=\"\"`.(there are some specific exceptions to this rule, but you should ignore them for this course).\n\n- The `width` and `height` attribues are also optional. They provide the width and height of the image in pixels. The CSS `width` and `height` properiteis override the HTML attribues in the rendered version of the page. \n\nIf you plan to almost always display images with a specific width and height, then you should use the attributes to specify those values. That lets your browser optimize the rendering speed by allocating room for you image before it finishes downloading. \n\nIn many cases, however, you won't know the specific width and height in advance, especially if the image's size is dependent on the output device. For instance, mobile devices often render images at a smaller size than in a desktop browser. In such cases, providng the `height` and `weidth` attribues may lead to worse overall performance. Instead, us the `height` and `width` CSS properties exclusively.\n\nHere's a typical image tag:\n\n```\n\n\\<img src=\"lucrezia.jpg\" alt=\"Da Vinci's smarter sister, lucreezia\" width=\"800\" height=\"600\" /\\>\n\n```\n\n\\#\\#\\#images as Links\n\nYou can use any non-interactice HTML elemnt as a link, including iamges. (the non-interactive requirement excludes form contorls and other links). To make an image clickable and have it linke to another page, place the `img` tage inside and `a` tage:\n\n```html\n\n\\<a href=\"url-of-link\"\\>\n\n \\<img src=\"url-of-image\" alt=\"alt-text\" /\\>\n\n\\</a\\>\n\n```\n\n`url-of-link` is the destination for the link, while `url-of-image` is the location of the iamge.\n\nThe URL are typically different, but they don't have to be. If they're the same, the link acts as a way to see the image all by itself. Often, this single image is larger than the original. Some browsers let you click the stand-alone picture to toggle between viewing it \"actual size\" or \"fit-to-screen\". \n\n\\#\\#\\#Background Images\n\nYou can also add background images to a page or elemnt by applying the CSS `background` or `background-image` property. Background iamges appear behind the conetne for ht element that requested the background and its descendants. Most background images apply to an entire page, so we use the `body1 selector to specify them. However, you can apply backgrounds to any slector, such as a tag, class, or id selector. For instance:\n\n```\n\n\\<section\\>\n\n Sint duis dolor consectetur ad nostrud sint. Occaecat reprehenderit officia ex\n\n duis velit veniam magna labore.\n\n\\</section\\>\n\n\\<nav\\>\n\n \\<ul\\>\n\n \\<li\\>\\<a href=\"\\#\"\\>Home\\</a\\>\\</li\\>\n\n \\<li\\>\\<a href=\"\\#\"\\>Work\\</a\\>\\</li\\>\n\n \\<li\\>\\<a href=\"\\#\"\\>Play\\</a\\>\\</li\\>\n\n \\</ul\\>\n\n\\</nav\\>\n\n```\n\n```\n\nhtml {\n\n font-size: 32px;\n\n}\n\nbody {\n\n background-image:\n\n url(\"http://d3jtzah944tvom.cloudfront.net/202/images/lesson\\_3/gradient-background.png\");\n\n}\n\nsection {\n\n display: inline-block;\n\n width: 500px;\n\n}\n\nnav {\n\n background-image:\n\n url(\"http://d3jtzah944tvom.cloudfront.net/202/images/lesson\\_3/blurry.png\");\n\n display: inline-block;\n\n height: 200px;\n\n width: 250px;\n\n}\n\n```\n\nThere are several other background properties you can provide with a background image, including the size of the image, the positioning, and repeat counts. Here, we deomonstrate setting the size of the background image to 25% of the container width.\n\n```\n\nbody {\n\n background-size: 25%\n\n}\n\n```\n\n\\#\\#List Overview\n\nGiven the variety of lists on the Web, you may find it surpising to learn the HTML provides a mere six tags to impment the three list types: \\*unordered\\*, \\*ordered\\* and \\*description\\*.\n\n\\#\\#\\# Unordered List\n\nUnordere lists contain a series of unordered itmes. By unordered, we mean that there is no visual numberin or naming system for the items in the list. THe content itself may have a implicit ordering, perhaps alphabetical, but the browser displays a \\*bullet\\*--a glyph that looks like a small dot, disc, circle or square -- instead of a number or letter before each itme. By defualt, browsers render unordereed lists vertically, each proceed by a bullet. However, you can choose a horizontal display and hide the bullets. You can even use custom bullets.\n\nHTML uses the `\\<ul\\>` and `\\<li\\>` tags to construct unorered lists. Here's a simple example:\n\n```\n\n \\<ul\\>\n\n \\<li\\>Red\\</li\\>\n\n \\<li\\>Orange\\</li\\>\n\n \\<li\\>Yellow\\</li\\>\n\n \\<li\\>Green\\</li\\>\n\n \\<li\\>Blue\\</li\\>\n\n \\<li\\>Indigo\\</li\\>\n\n \\<li\\>Violet\\</li\\>\n\n \\</ul\\>\n\n```\n\n\\#\\#\\#Ordered List \n\nordered list have ordered content; that is they have a sequence that is a visual component of the list. By default, most browsers render a vertical list of numbered items, but you can change this to roman numbers as well as alphabetic letters, including foreign alphabets. Examples of ordered lists include a numbered list of the top 10 programming languages or aa numbered list of the steps required to make a pot of coffee.\n\nHTML uses the `\\<ol\\>` and `\\<li\\>` tags to construct ordered lists. Here's a simple example:\n\n```\n\n\\<ol\\>\n\n \\<li\\>Red\\</li\\>\n\n \\<li\\>Orange\\</li\\>\n\n \\<li\\>Yellow\\</li\\>\n\n \\<li\\>Green\\</li\\>\n\n \\<li\\>Blue\\</li\\>\n\n \\<li\\>Indigo\\</li\\>\n\n \\<li\\>Violet\\</li\\>\n\n\\</ol\\>\n\n```\n\nAll we did here was change the `\\<ul\\>...\\</ul\\>` tag to `\\<ol\\>...\\</ol\\>`.\n\n\\#\\#\\#Description Lists\n\nDescription lists (called definition lists before HTML5) contian a list of terms and definitions. Each item in the list includes one or more terms and onre or more definitions. Examples od description lists include dictionaries, bibliographies, and that relic of the past, the phone book. \n\nHTML uses the `\\<dl\\>`, `\\<dt\\>` and `\\<dd\\>` tags to construct description lists. Here's a simple example:\n\n```\n\n\\<dl\\>\n\n \\<dt\\>Unordered\\</dt\\>\n\n \\<dd\\>A simple list with bullets.\\</dd\\>\n\n \\<dd\\>A plain list with no bullets or sequence numbers.\\</dd\\>\n\n \\<dt\\>Ordered\\</dt\\>\n\n \\<dd\\>A simple list with sequence numbers or letters.\\</dd\\>\n\n \\<dt\\>Description\\</dt\\>\n\n \\<dt\\>Defintion\\</dt\\>\n\n \\<dd\\>A list with terms and definitions.\\</dd\\>\n\n\\</dl\\>\n\n```\n\nEach grouping may have more than one term (dtc) and more than one descritiopn (dd). The first item above has one terem and two defintions, while the final includes the two terms and one defintion.\n\n\\#\\#\\# Nested Lists\n\nYou can nest any list within another list, regardless of types. YOu can even mix and match them - put an unordered list insde a description list, for instance. In the following example, we'll add an example of each type of list to the description items:\n\n```html\n\n\\<dl\\>\n\n \\<dt\\>Unordered\\</dt\\>\n\n \\<dd\\>A simple list with bullets.\\</dd\\>\n\n \\<dd\\> A plain list with no bullets or sequence numebrs.\\</dd\\>\n\n \\<dd\\>\n\n \\<ul\\>\n\n \\<li\\>Red\\</li\\>\n\n \\<li\\>Green\\</li\\>\n\n \\<li\\>Blue\\</li\\>\n\n \\</ul\\>\n\n \\</dd\\>\n\n \\<dt\\>Ordered\\</dt\\>\n\n \\<dd\\>A simple list with a visible sequence.\\</dd\\>\n\n \\<dd\\>\n\n \\<ol\\>\n\n \\<li\\>Red\\</li\\>\n\n \\<li\\>Green\\</li\\>\n\n \\<li\\>Blue\\</li\\>\n\n \\</ol\\>\n\n \\</dd\\>\n\n \\<dt\\>Description\\</dt\\>\n\n \\<dt\\>Definition\\</dt\\>\n\n \\<dd\\>A list with terms and defintions.\\</dd\\>\n\n \\<dd\\>\n\n \\<dl\\>\n\n \\<dt\\>Red\\</dt\\> \\<dd\\>\\<div class=\"red\"\\>\\</di\\>\\</dd\\>\n\n \\<dt\\>Green\\</dt\\> \\<dd\\>\\<div class=\"green\"\\>\\</div\\>\\</dd\\>\n\n \\<dt\\>Blue\\</dt\\> \\<dd\\>\\<div class=\"blue\"\\>\\</div\\>\\</dd\\>\n\n \\</dl\\>\n\n \\</dd\\>\n\n\\</dl\\>\n\n```\n\n```\n\nli, dd, dt {\n\n font-size: 1.25rem;\n\n}\n\n.red, .green, .blue {\n\n width: 50px;\n\n height: 25px;\n\n}\n\n.red {\n\n background-color: red;\n\n}\n\n.green {\n\n background-color: green;\n\n}\n\n.blue {\n\n background-color: blue;\n\n}\n\n```\n\n![Screen Shot 2021-02-11 at 4.31.29 PM.png](quiver-image-url/5C3A9FB105D0AEA984758C75B49D57B6.png =778x608)\n\nOne more example: here we nest unordered lists to show how the tags nest:\n\n```\n\n\\<ul\\>\n\n \\<li class=\"red\"\\>\n\n Red\n\n \\<ul\\>\n\n \\<li\\>&\\#9608;&\\#9608;&\\#9608;\\</li\\>\n\n \\<li\\>\\#ff0000\\</li\\>\n\n \\<li\\>rgb(255, 0, 0)\\</li\\>\n\n \\</ul\\>\n\n \\</li\\>\n\n \\<li class=\"green\"\\>\n\n Green\n\n \\<ul\\>\n\n \\<li\\>&\\#9608;&\\#9608;&\\#9608;\\</li\\>\n\n \\<li\\>\\#00ff00\\</li\\>\n\n \\<li\\>rgb(0, 255, 0)\\</li\\>\n\n \\</ul\\>\n\n \\</li\\>\n\n \\<li class=\"blue\"\\>\n\n Blue\n\n \\<ul\\>\n\n \\<li\\>&\\#9608;&\\#9608;&\\#9608;\\</li\\>\n\n \\<li\\>\\#0000ff\\</li\\>\n\n \\<li\\>rgb(0, 0, 255)\\</li\\>\n\n \\</ul\\>\n\n \\</li\\>\n\n```\n\n```\n\n.red {\n\n color: red;\n\n}\n\n.green {\n\n color: green;\n\n}\n\n.blue {\n\n color: blue;\n\n}\n\n```\n\n![Screen Shot 2021-02-11 at 4.34.47 PM.png](quiver-image-url/D061994C61F9A2EDF10D006C42EF72B3.png =260x303)\n\nNotice how the bullts change at different levels. Most browsers will cycle through several different bullets as you nest unordere lits more deeply. Neither ordered lits, nore defintion lists, do anything similar. \n\nBy the way; theat `&\\#9608;` generates a solid rectualngle charcter, the Unicode character for a full block. Most developers will never have need for this character. \n\n\\#\\#\\#Navication Menus\n\nDevelopers frequenctly use unordered lists to construct navigation menus, both vertical and horizontal. Commonly, you start out with HTML and CSS that looks somehting like this:\n\n```\n\n\\<nav\\>\n\n \\<ul\\>\n\n \\<li\\>\\<a href=\"\\#\"\\>Home\\</a\\>\\</li\\>\n\n \\<li\\>\\<a href=\"\\#\"\\>Projects\\</a\\>\\</li\\>\n\n \\<li\\>\\<a href=\"\\#\"\\>Team\\</a\\>\\</li\\>\n\n \\<li\\>\\<a href=\"\\#\"\\>Help\\</a\\>\\</li\\>\n\n \\</ul\\>\n\n\\</nav\\>\n\n```\n\n```\n\nnav ul {\n\n background-color: powderblue;\n\n list-style-type: none;\n\n padding-left: 0;\n\n width: 200px;\n\n}\n\nnav li {\n\n color: blue;\n\n font-size: 1.25rem;\n\n}\n\nnav a {\n\n box-sizing: border-box;\n\n color: blue;\n\n display: inline-block;\n\n line-height: 2.5;\n\n padding: 0 10px;\n\n text-decoration: none;\n\n width: 100%;\n\n}\n\nnav a:hover,\n\nnav a:focus {\n\n background-color: blue;\n\n color: white;\n\n}\n\n```\n\nour CSS removes the list bullets with the `list-style-type` property, and uses the `:hover` and `:focus` \\*pseudo-classes\\* to draw a highlight bar on the menu at appropriate times. \n\n```\n\nCSS provides more than 30 pseudo-class thaat you can use as selectors. Here, we use `:hover` to determine whether the user's mouse cursor is above one of our links, , while we use `:focuse` to determine if the link has the current keyboard focus.\n\nSome pseudo-classes, like `:last-child`, let you select elements based on their relationship to other elements. Others, like `:hover` le you detect and react to user activity on the page. Still others, like `:full-screen` can detect the user's browser state. See MDN page on Pseudo-classes for a complete list. \n\n```\n\nIf you want a horizontal list, you need a few more changes:\n\n- Set the width of the menu (`ul`).\n- Set the font for the lis (`ul`) to 0, then restore it for the list items (`li`).\n- Se tht elist items to `inline-block`.\n- Set the list items to `inline-block`.\n- Set the width of the list items to a vlue that will distribute the values the way you want them distributed (typically, you want a percentage width).\n- Center the list items horizontally.\n\n```\nnav ul {\n  font-size: 0;\n  width: 100%;\n}\n\nnav li {\n  display: inline-block;\n  font-size: 1.25rem;\n  text-align: center;\n  width 25%;\n}\n```\n\n# Tables Overview\n\nBack in the earliest days of the web, long before CSS took off, most devleopers employed tables to implemnt lahyouts.  For instance, sites often used a format that had a banner at the top of the page, a footer at the bottom of the page, and two or three columns of content, navigation items, and ads between the two.  Today, we use CSS to do that; back then, the solution required tables, so most developers learned how to use them for layout.\nso most developers learned how to use them for layout.\n\nHowever, from the beginning, such code was a hack, and most peoplke knew it.  \n\n###Table tabgs\n\nHTML provides a variety of tags to construct tables.  The ones you'll see most often are:\n\n- The `<table>` tag defines a table.\n- The `<tr>` tag defines a row in a table.\n- The `<td>` tag defines a single cell of content in a table. each row includes zero or more cells.\n- The `<th>` tag defines a single heading. The first cell in a row or column is typically a heading, but this is not required.\n- `<thead>`, `<tbody>`, and `<tfoot>` each define a set of one or more rows tha comprise the header, body, and footer rows of a table.\n\nHere, we define a simple table with no `thead`, `tbody` or `tfoot` components:\n\n```\n<table>\n  <tr>\n    <th>Color Name</th>\n    <th>Color Hex</th>\n    <th>Color Decimal</th>\n  </tr>\n  \n  <tr>\n    <th>red</th>\n    <td>#f00</td>\n    <td>255, 0, 0</td>\n  </tr>\n  \n  <tr>\n    <th>green</th>\n    <td>#0f0</td>\n    <td>0, 255, 0</td>\n  </tr>\n  \n  <tr>\n    <th>blue</th>\n    <td>#00f</td>\n    <td>0, 0, 255</td>\n  </tr>\n</table>\n```\n\n```\ntable {\n  fon-size: 1.5rem;\n}\n```\n\n![Screen Shot 2021-02-12 at 10.20.57 AM.png](quiver-image-url/46DEBEF73FF74DF88E27E42C7FEFC37F.png =510x240)\n\n##Semantic Table HTML and Heading Scope\n\nyou can use the `thead`, `tfoot` and `tbody` elements to provide semantic identification of the header, footrer, and body rows.  YOu can also add the `scope` attribute to identify `th` elemnts as row (`scope=\"row\"`) or column (`scope=\"col'`) headings.  In the next example, we add these semantic features to the previous example, then use thme as selctors in our CSS.\n\n\n```\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Color Name</th>\n      <th scope=\"col\">Color Hex</th>\n      <the scope=\"col\">Color Decimal</th>\n    </tr>\n  </thread>\n  \n  <tbody>\n    <tr>\n      <th scope=\"row\">red</th>\n      <th>#f00</td>\n      <td>255, 0, 0</td>\n    </tr>\n    \n    <tr>\n      <th scope=\"row\">green</th>\n      <td>#0f0</td>\n      <td>0, 255, 0</td>\n    </tr>\n    \n    <tr>\n      <th scope=\"row\">blue</th>\n      <td>#00f</td>\n      <td>0, 0, 255</td>\n    </tr>\n  </tbody>\n  \n  </tfoot>\n    <tr>\n      <td>name</td>\n      <td>#rrggbb</td>\n      <td>red, green blue</td>\n    </tr>\n  </tfoot>\n</table>\n\n```\n\n```\ntable {\n  font-size: 1.5rem;\n}\n\nth {\n  font-size: 1.75rem;\n}\n\ntbody tr {\n  font-style: italic;\n}\n\ntbody tr:nth-child(1) {\n  color: red;\n}\n\ntbody tr:nth-child(2) {\n  color: green;\n}\n\ntbody tr:nth-child(3) {\n  color: blue;\n}\n\ntfoot tr {\n  font-size: 1rem;\n}\n\ntfoot td {\n border-top: 1px solid gray;\n}\n\ntd {\n  text-align: center;\n}\n\n[scope=\"col\"] {\n  padding: 0 10px;\n  text-decoration: underline;\n}\n\n[scope=\"row\" {\n  text-transform: uppercase;\n}\n```\n\n![Screen Shot 2021-02-12 at 12.40.00 PM.png](quiver-image-url/B16A51AEF31E4CCE0148D720BB68E2B7.png =580x190)"
    }
  ]
}