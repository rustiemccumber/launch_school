{
  "title": "The Box model",
  "cells": [
    {
      "type": "markdown",
      "data": "#Introduction\n\n###Testing and Validation\ntesting and validation should be a habit the process for that is outlined below\n\n1. upday your code\n2. Test the results in your browser\n3. Validate your HTML\n4. Validate your CSS\n5. *Check your page on other browsers*\n6. GO back to step 1.\n\n### Vocabulary\n\n- The box model\n  - box properties\n    - width and height\n    - padding and margins\n    - borders\n  \n  - visual display models\n    - block\n    - inline\n    - inline-block \n  \n  - Box sizing model\n    - content-box\n    - border-box\n\n-dimensions\n - absolute units\n - relative units \n \nYou should be familiar with the follow terms, but you're not expected to discuss them in detail.\n\n- container \n- physical pixels\n- CSS reference pixels\n\n### Box Properties\n  - Every box has a width, height, padding, border and margins; know the differences.\n  - Padding, borders, and margins have separate properties to set the left, right, top, bottom of each element.  You can use shortcut properties to specify all four sides at once. \n  - How does the visual display model interact with margins, bordres, and padding?\n  - How does the visual display model interact with margins, borders, and padding?\n  \n###Visual Display Models\n\n- Understand the differences between `inline`, `block`, and `inline-block`.\n- Containers are almost always `block` elements, while non-containers are `inline`.  When in doubt, check MDN.\n- Don't try to memorize which HTML elements are `block` or `inline`.\n- How and when can you chan ge an element's visual display model?\n\n###Box Sizing Mode\n\n- Understand the `content-box` and `border-box` sizing models.\n- How and when can you change the box-sizing model for an elemnt?\n\n###Dimensions\n\n- Know the differences between `px`, `em`, `rem`, `%` and `auto`.\n- Understnad whey we need to talk about CSS reference pixels and physical pixals.  Don't try to memorize the details, but understand the topic well enought that you won't be too surpriesed the first time you encounter the differences in the wild. \n- Use `auto` margins to center block elements horizontally. \n\n###HTML \n\nDon't try to memorize any new HTML elements you meet in this lesson. \n\n###CSS\n\nBecome comfortable with the CSS `dispay`, `box-sizing`, `width`, `height`, `padding`, `border`, and `margin` properties.  Memorize this list of properties so you can loo up the details when needed. \n\n###Try the Examples\n\nTry all the code examples, but don't copy and paste them.  Typing the code will help you develop that much desired \"muscle memory\" \n\n# Everything is a box\n\nword processing software ordinarily outpus one character at a time, moving form left-t- righ or right to left as required by the documen'ts language (we will ignore languages that use vertical text).  As each line fills with words, the word processor atuomatically wraps down th enext line and starts adding charaters to the begining of a new line. .\n\nYou browser works in uch the same way to render HTML pages: it displacys \"words\" one at a time horizontally until it encounters a \"qord\" that doesn't fit.  At this point, the browser starts a new *line* -- one or more \"words\" at the same horizontal level in the current container element. \n\nWe put \"words\" in qoutes since a browser must deal with more than words: web pages have images, mdeia players, containers (which we'll discuss later), and other kinds of objects.  For simplicity and clarity , we'll call these objects *elements* instead of words.\n\nAs the browser renders a document, it processes one element at a time.  The b\\rowsers determines how muc horizonatla and vertical space -- a rectangl *box* -- it needs to draw the item.  It uses the borwser defautls and your CSS to calculate the required dimensions.  IF there's enough horizontal space remaining on the current line, the browser places the element there; otherwist, it starts a new line.  Each line uses enouigh vertical space to contain all its rectangles.  This process repeats for every box on the page. \n\nOur description simplifies the rendering process considerably, but this mental model works well enough to help understand the process.  THe most important takeaways from this description are:\n\n- Ever element requires a box-shaped segment of the page.\n- Every character of text content also needs a boxed protion of the page.\n- The browser calcualtes the dimension sof tha box by using the browser defaulst and CSS.\n\nThat's a lot of calculating, but computers do that well.  Still, even something simple, like determinign the size of a box, has more subt\\lety to it than you might think.  How hard can it be to measure the height and width of an element?  Well, its not difficult, but there's more than one way to determine the size. We use the term *CSS box model* or *box model* to descirbe how the browser calculates the box size for any given element.  We will spedn most of this lesson learning \\about the box model; it may be the most fundamental concept in HTML and CSS, so be sure you graps it. \n\n### widths and heights\n\nto begin, let's assume that the box model treats elements as having a height and width and no other characteristics.  Assume we have five elements with the following dimensions:\n\n|*Width in pixels*|*Height in pixels*|\n|--|--|\n|300|125|\n|400| 200|\n|100|100|\n|500|80|\n|250|60|\n\nWe also assume that our element shav e `display` property of `inline-bloxk`, which we'll discuss later. For now, you hsould knwo that the browser lays out `inline-block` elements  side-by-side up to the page width.  If one doesn't fit, the browser starts a new line. \n\nFigure 1 illustrates how this process works when the browser viewport (the part of the window where the browser displays content) is 800 pxiels wide.  Figure 2 shows the same information when the viewport is 700 pixels wide. \n\n![Screen Shot 2021-02-08 at 10.37.22 AM.png](quiver-image-url/5AD0B7249EECC465DF1908BEB049A114.png =746x765)\n\nThe verticl position of the side-by-side boxes varies.  Figures 1 and 2 show them aligned at the top, but the actual alignment varies based on the content and the CSS settings for each rectangle.\n\n### Box Properties\n\nEvery element box has the following properties (the browser may ignore some of them):\n\n- the *width* and *height* define how much horizontla and vertical space it needs for the **content area** of the box, which may or may not include the padding and borders.  In most cases , the browser can determine the width and height automatically.\n- The *padding* is an area that surrounds the content area of the box and separates the content form its border. It is typically opaque and hides anything that it overlays.\n- The *border* is a boundary the surrounds the padding. \n- The *margin* is a transparent area that lies outside the border and supplies separation between elements. \n- The *display* property determines how the broser lays out and elemtn relative to its neighbors\n\n![Screen Shot 2021-02-08 at 10.45.55 AM.png](quiver-image-url/2BE2DBA7BEC5DA53CC6D221B397E07CC.png =226x174)\n\nthis diagram shows and element that has a content area that:\n\n- is 928 pixdesl wide and 168 high\n- has 10 pixesl each of top and bottom padding plus 20 pixesl each of left and right padding\n- has a border that is 1 pixel thick,\n- has a 28-pixel bottom margin (the left, righ, and top margins are 0).\n\nYou can see this diagrm, or one like it, in the element inspecter for your broswrser. \n\n### The Visual Formatting Model\n\nIn the previous seciton, we introduced the CSS Box Model and discussed how the broswer uses it to the layout HTML elements and text in your browser's window.  If this was all there was to the story, front-edn development would be a simple affair, though nobody would eb happy with the results.  As it happens, there's more to the CSS Box Model. In this section, we'll learn about the *visual formatting model*.\n\nWhen we discussed how the browser lays out elements, our stated assumption was that all boxes have a `display` property of `inline-block`.  We chose that property value since it's easy to understand, adn best demonstrates how page layout works in a browser.  In trught, `display` has more than two dozen values, but most CSS uses the values `block`, `inline`, and `inline-block`.  We call this property the visual formatting model.\n\n## Block Elements\n\nBlock elements appear on almost all webpages: headings, paragrapghs, secitons, tables, forms, lists, and more are `block` elements.\n\nMost `block` eleemnts group one or more elements - some of which may themselves be `blcok`s- into ares of the page. For isntance, `header` elements group together eleemnts into a page header.  we often call such `blcok` eleemnts *containers*.  The master container (the outermost) is the `body`; eveyr other element belongs to a container. \n\n```\nwe somtimes ust the term *partent* to refer to a container, and use *child* to describe an eleemnt contained within a container.  These relationship terms also let us talk about grandparetns, ancestors, descendants, sibling,s cousins, etc.\n```\n\nBy default, a `block` element occupies all horizontal space available within its container, with nothing to the left or right of the `block`.  If your page contains 3 `blcook` elemnts directly insdie the `body` element and nothing else, the all three elements will display one above the other like a stack of blcoks.  This behavior makes `blcok` elements predictable and easy to use. \n\n`block` elements use the box properties (`width`, `height`, `padding`, `border`, `margin`) to determine the size of the element.  The browser reserves a box of the right size on the page, and this is wehre it draws the content.  If you want an element that is 928 pixels wide, 168 pixels high, with 20 pxiels of left and right padding, 10 pixesl of padding on the top and botto, a `-pixel border, and a 28-pixel margin, all those properties will paly a part in the overal dimensions of the element.  Thus, the overall dimensions will be 970 x 218 pixels.  (As we'll see later, it's possible to change the way the browser calcualtes the dimensions.  This example assumes that you're using the browser defaults)\n\n```\nAs we'll see later, the `width` and `height` of an element may include the `padding` and `border` in addition to the content area.  By defuatl, `width` and `height` exclude the `padding` and `border` form the mesaured content area.  We'll learn more about this fact in the next assignment wehn we learn about box sizing. \n\nAnother item of note is that the height and with values never include the margins.  Technically, margins provide spacing between eleemnts but are not part of them. However, you do need to account for the margins when determining whterh and item will fitn in a given space\n\n```\n\nThough a `block` element takes up an entire row in a container, this doenst not alter the width of the element.  The browser renders the `block` element on a line by itself, but the lement has the specified (or computed) with.  FOr example if you have 500-pixel wide `blockqoute` in a 900-pixel wide `seciton`, the `blockqoute` element uses 500 pixels, but the browser will elave the remaing 400 pixels of the section emtpy.\n\nMost elements are `block` elements by default.  here are some of the most common:\n\n- `section`, `article`, `aside`, `header`, and `footer`\n- `p`\n- `h1` through `h6`\n- `blockquote`\n- `ul`, `ol`, `dl`\n- `figure` and `figcaption`\n- `form` and `fieldset`\n\nYou can convert any element to a `block` element with the `dsipay: block` CSS property.  It's common to render (`a`) and images (`img`) as `block` elements.\n\n###Inline Element s\n\nInline elements provide  small bit of semnatic meaning to content; browsers us this to alter thw ay they display small sections of text, which, in turn, helps the reader spot specitic items with ease.  For instance, if you want to use bolded text for defintions, you can use the `b` element to render defintions in boldface.  The reader can see at a glace where the defintions are in the document.  By defualt, `b` is an `inline` element.\n\nThe following elements are `inline` by default.\n\n- `span`\n- `b`, `i`, `u`, `strong`, `em`\n- `a`\n- `sub` and `sup`\n- `img`\n\n`inline` elements handle the dimension properties (`width`, `height`, `padding` and `border` and `margin`) differently form the wya block elements trat them.  This difference is where the box model starts to get messy. Browsers handle **left** and right margins and padding for **inline** element sin the same way as for `block` elements, but they process other box model properties differently.  For `inline` element,s browsers:\n\n- **ignore** the `width` and `height` properties (except with th `img` element), but instead use values computed from the element content.\n- **ignore** top and bottom margins\n- **don't ignore** borders but the reuslt may look odd (see the next section).\n- **don't ignore** top and bottom padding, but you won't ntoice this unless you have a border or background. \n\nYou can convert any element ot an `inline` element with the `display: inline` CSS proeprty. THe most common reason to do so is to override a prior declaraiton. \n\n### Borders, Padding, Margins, and inline Elements\n\nConsdier the following HTML and CSS and hte associated output:\n\n```\n<p>\n  Deserunt ad eu dolor in nostrud eu. Aliqua ad veniam magna et nostrud. Non ea\n  sunt. <em>Magna aliqua nostrud et laboris fugiat.</em> Ea nostrud non laboris.\n  Quis sunt dolore esse pariatur velit minim cillum ipsum.\n</p>\n```\n\n```\np {\n  background-color: #d4f0f8;\n  border: 1px solid #2db7e1;\n  box-sizing: border-box;\n  font-size: 1.5rem;\n  padding: 0.5em;\n  width: 780px;\n}\n\nem {\n  background-color: rgba(255, 255, 0, .5);\n  border: 30px solid rgba(255, 0, 64, .5);\n  margin: 40px;\n  padding: 30px;\n}\n```\n![Screen Shot 2021-02-08 at 11.32.18 AM.png](quiver-image-url/9956B8E851EFC195BC88203BA13A226D.png =782x164)\n\nThis example demonstrates how browsers handle borders, padding, margins with `inline` elemtns.  Here, the border for the `<em>` is orange and padding yellow.  the presence of the orange and yellow areas shows that the `em` element has padding and a border on all four sides, but the text above and below the element ignores them.  In fact, thought the magic of CSS opacity (transparency), we can see the `em` border and padding overlay the text above it, while the content below it overlays the bordr and padding.\n\nOne more itme to note here is that the top and bottom borders extend beyond the boundaries of the `p` element.  The padding would do that as well if we increased it by a few more pixels.\n\nOne more itme to note here is that th etop and bottomw bordrs extend beyond the boundaries of the `p` element.  The padding would do that as well if we increased it by a few more pixels. \n\nYOu need to understand this behavior is more as soemthing to avoid than to make use of it.  YOu can waste a lot of time  trhying use bordrs, padding and margins with inline elemetns when you're not expecting this behavior.  The amin idea is that the left/right factors affect the flow, whil the top and bottom do not. \n\n###Inline-Block Elements \n\n```\nThe inline-block visual display model is a legacy model.  It is equvialent to a new model called inline flow-root.  However, despite its legay, inlin-lcok is probably not going to go away anytime soonl there are too many websites that still use it.  We will use `inline-blcok` throught this course; it will probably be several years before inline flow-root and other new display modesl gain traction.\n```\n\n`inline-block` elements are mixture of both previous types.  They act like `block` elemetns, except for one significant detail: `inline-block` elements do not take up and entire row when the `width` property is less than the avilable width.  Instead, they flow in the same way that text and `inline` elements flow from one line to the next, which lets you place `inline-block` elements side by side with other `inline` or `inline-block` elements.\n\n`inline-blcok` elements also differ from `inline` in that `inline-block` elements observe the `width` and `height` properties.  The padding, borders, and margin all work like they do with `block` elements.\n\nBrowsers preform verticl aligment for adjacent `inline-blcok` elements as well as ordinary `inline` elements.  The next three examples illustrate three of the avilable alignements; all three use the same HTML and CSS except for the `vertical-algin` property. \n\n```\n<div>\n  <p>\n    Occaecat sunt nulla esse. Est cupidatat fugiat sit mollit.  Sunt in velit\n    mollit deserunt veniam.\n  </p>\n  <p>\n    Aliquip dolor aliqua consequat ullamco exercitation anim.  Dolor voluptate\n    irure eiusmod cillum consectetur enim excepteur mollit mollit. Do proident\n    ipsum dolore. Et aliqua veniam ex laborum aliquip cupidatat excepteur.\n  </p>\n</div>\n\n```\n\n```\ndiv {\n  background-color: #c0ffc0;\n  border: 1px solid green;\n  padding: 10px;\n}\n\np {\n  background-color: white;\n  border: 1px solid blue;\n  display: inline-block;\n  margin: 0 2%;\n  padding: 10px;\n  vertical-align: bottom;\n  width: 40%;\n}\n```\n![Screen Shot 2021-02-08 at 11.57.13 AM.png](quiver-image-url/B124B2F8E474A74EA3684308DE33EB03.png =743x141)\n\n```\np {\n  vertical-align: middle;\n}\n```\n\n![Screen Shot 2021-02-08 at 11.57.46 AM.png](quiver-image-url/C251CABF8E075F69A5A6DB6ADA9B64ED.png =746x153)\n\n```\np {\n  vertical-align: top;\n}\n```\n\n![Screen Shot 2021-02-08 at 11.58.14 AM.png](quiver-image-url/F599E33ECCD03E7CBDB27059680D6955.png =742x149)\n\nThe browser has some choice between using `inline` of `inline-block` as the default `display` property for an element type.  In most calses all browseres agree, but there are excetipsn. For instance, Chrome and safari treat `input` and `textarea` elemetns as `inline-blcok`, while Firefox trest them as `inline` elements.  This inconsistency typically isn't a problem.  When it is, you can explicityly set the `dispay` proerty:\n\n```\np {\n  vertical-align: top;\n}\n```\n\nIts a common bisbelif that images (`img`) are `inline-blcok` elements; in fact, they are `inline` elements.\n\nYou can convert any element to an `inline-block` element wiht  the `display: inline-block` CSS property. A useful application for this is to arragne the contents of a list horizontally instead of vertically; horixontal navigation bars often use list elements defeidn as `inline-block`. \n\n### Nesting Elements and the Visual Display Model \n\nHTML lets you nest elemetns inside other elements; its built-in to the syntax of the language.  However, usch nesting is not uncontrolled. For instance, you can't nest `block` and `inline-block` elements within `inline` elements.  Thusy, you can put an `em` (inline) isndie a `blockquote` (block) but you can't put a `blockqoute` in and `em`.\n\nThere is one exception to this rule: you can next `block` and `inline-blcok` elements inside an `a` tag provided the blcok doe snot include the interactive elements like `input`, `button`, `select`, `textarea`, or another `a` tag.  In practice, you will proabbly no use this feature.\n\nYOur broswer may render improperly nested elments the way you want them to appear, but you should not rely on tha beahvior; other browsers or browser versions may not.  If W3C complains about nesting, you hsould correct it in most cases.  (late in this course we will see one situation in which we will ignore W3c's adic on this matter).\n\nBeware of invalid nesting as well. Most browsers will render both of these nsippets the way the developer intended:\n\n```\n<strong><em>This is strong empahsized text</em></strong>\n```\n\n```\n<strong><em>This is strong empahsized text</strong></em>\n```\n\nHowever, the second will fail W3C validation; one pair of open/close tags should nest entirely insde the other. You hsould neve ignore a warning about this type of mis-nesting.\n\n###Other Visual Display Models\n\nAs mentioned earlier, there are around two dozn vidual display models.  SOme show up in routine development. For instance, lits itmes default to a `list-tiem` display model, while table cells have a `table-cell` display model.  You won't use these models a lot in practice, so don't bother tying to memeorize them.  However, some of the variants are sometime useful  let an expert tell you when.\n\nAs of 2018, two new `disply` properties seem poised for widspread groth: `flex` and `grid`.  These properties solve a lot fo design problems that plaque front-end devleopers today.  It will take some time for the best practices to emerge on how and when tto use them, but widspread us is coming soon.  We'll introduce both in a later lesson.\n\n#Box Sizing\n\nThe `box-sizing1 property can make building CS layouts easier and a lot more intutiive.\n\nThe imortant takeways here are:\n\n- The usable `box-sizing` property values are `content-box` and `border-box`.  The CSS standard depcrecates the `padding-bx` setting; *don't use it*\n- The `content-box` setting is the dfault setting fo the `box-sizing` property for all element sin all moder browsers.  In this model, the `width` and `height` properties specify the size of the actual content area.  YOu need to add padding and borders to get the size of the visible box. \n- The `border-box` setting causes the borwser to interpret the `width` and `height` properities as the total weidth and height of the box excluding the margins.  That is, the width and height include the content area as well as the padding and borders.\n- The `border-box` setting is \"best\" since it simplifies the math a front-end developer must do.  For example, if we have a box with a width of 50% and padding of 12px; `border-box1 ensures that it's precisely 50% of the container width, not 50% plus 24-pixels.\n- If you want to use border-box pretty much everywhere, you can add the following to your CSS:\n\n```\nhtml {\n  box-sizing: border-box;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n```\n\nexplaining hte syntax above\n\n## Practice problems\n\n1. given the code below, what is the minum width and height (in pixels) that the `div` needs to entirely contain the `img` element (incluidng its margins)?\n\n```html\n<div>\n  <img src=\"#\" alt=\"test\" />\n</div>\n```\n\n```\ndiv {\n  background-color: lightgray;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n}\n\nimg {\n  border: 4px solid red;\n  box-sizing: content-box;\n  display: inline-block;\n  height: 300px;\n  margin: 20px 19px 10px 11px;\n  padding: 10px 20px\n  width: 500px;\n```\n\nsince the `img` has `display: inline-blcok`, we can compute the dimensions directly from the CSS properties.  The `div` needs 580 pixels horizontally , and 360 pixels vertically. Since the `div` uses `border-box1 box-sizing, it must have a width and height of at least 580px and 360 px respectively.\n\nWhile we don't typically count margins in dtermining and elemnt's height and width, we need to include them here when calculating how much space we need in the `div`. \n\n2. Given the code below, what is the minimum width and height (in pixels) that the `div` needs to entirely contain the `section` element (including its margins)? How does this differe from the rest of the previous pratice problem?\n\n```\n<div>\n  <section>content</section>\n</div>\n```\n\n```\ndiv {\n  background-color: lightgray;\n  border: 1 px solid black;\n  box-sizing: border-box;\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n}\n\n\n\nsection {\n  border: 4px solid red;\n  box-sizing: content-box;\n  display: block;\n  height: 300px;\n  margin: 20px 19px 10px 11px;\n  padding: 10px 20px;\n  withd: 500 px;\n```\n\nSince the `section` element is a `block` element, we can compute hte dimensions directly form teh CSS properties.  The `div` elements needs 580 pixels horixontally.\n\nThe `div` needs 360 pixels vertically.\n\nSince the `div` uses `border-box` box-sizng, it must have a with and height of at least 580px and 360px.  The values are indentical to answer from the previous pratice problem.  THe chief difference is that other elements may appear adjacent to the `img` in problem 2, while the `seciton` in this problem will always be on a line by istelf within the `div` no matter its width. \n\n3. Given the code below, what is the minimum width and height (in pixels) that the `div` needs to entirely contain the `em` element (including its margins)?\n\n```\n<div>\n  <em>content</em>\n</div>\n```\n\n```\ndiv {\n  background-color: lightgray;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n}\n\nem {\n  border: 4px solid red;\n  box-sizing: content-box;\n  display: inline;\n  height: 300px;\n  margin: 20px 19px 10px 11px;\n  padding: 10px 20px;\n  width: 500px;\n}\n```\n\nlets say the width is 50px and the height is 50px\n\nhorizontal\n\n50px + 8px (border) + 19px (margin) + 11px (margin)+ 2px (border) + 40px padding\n\nvertical:\n50px + 8px (border) + 2px + 20px (padding)\n\n\n4.  Given the code below, what is the minimum width and height (in pixels) that the `div` needs to be to entirely contain `article` element (including its margins)?\n\n```\n<div>\n  <article>content</article>\n</div>\n```\n\n```\ndiv {\n  background-color:  lightgray;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n}\n\narticle {\n  border: 4px solid red;\n  box-sizing: border-box;\n  display: inline-block;\n  height: 300px;\n  margin: 20px 19px 10px 11px\n  padding: 10px 20px;\n  width: 500px;\n}\n```\n\n###horizantal:\n\n500px + 30 px (margins) + 2 px (div border)\n\n###vertical:\n\n300 px + 30px + 2px\n\n5. given the code below:\n\n```\n<div>\n  <tag1>content</tag1><tag2>content</tag2>\n</div>\n```\n\n```\ndiv {\n  background-color: lightgray;\n  border: 1px solid black;\n  box-sizing: content-box;\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n  width: 720px;\n}\n\ntag1, tag2 {\n  box-sizing: border-box;\n  height: 240px;\n  margin: 0;\n  padding: 0;\n  width: 360px;\n}\n\ntag1 {\n  background-color: yellow;\n}\n\ntag2 {\n  background-color: lime;\n}\n```\n\nwhich of the following element pairs will display side-by-side in the `<div>`?  Select all that apply:\n\n1.  Both elements are `block` elements.  NO\n2.  Both elements are `inline` elements.  YES\n3.  Both elements are `inline-block` elements.  YES\n4.  one eleemnt is a `block` element, and one is an `inline` element. NO\n5.  one element is a `block` element, and one is an `inline-block` element. NO\n6.  One element is an `inline` element, and one is and `inline-block` element. YES\n\n6.  WIll the follwoing code display the two article boxes side-by-side?  If not, why not?  How woud you fix it so that it places the boxes side-by-side?\n\n``` html\n<section>\n  <article>content</article><article>more content</article>\n</section>\n```\n\n```\nsection {\n  background-color: yellow;\n  border: 1 px solid red;\n  box-sizing: content-box;\n  display: inline-block;\n  height: 400px;\n  margin: 0;\n  padding: 20px;\n  width: 900px;\n}\n\narticle {\n  background-color: lime;\n  border: 1px solid blue;\n  height: 100%;\n  margin: 0;\n  padding: 10px;\n  width: 50%;\n}\n```\n\narticles are blocks, you could change tne display or inline block; addotopma;u tp ,ale tje, fot. we ,ist set tje actual width (incluidng padding abd border) to 50% so we aloso add `box-szinging: border-box;` to the article selector. \n\n7.  *challenge*. Given our solution to the previous question, what will happen if we put the `article` tgs on separate lines?\n\n```\n<section>\n  <article>content</article>\n  <articel>more content</article>\n</seciton>\n```\nWhen you put the  `article` elements on separate lines in the HTML, the browser sees the whitespace (a newline and several spaces in this case) between the tow articles.  It then collapses that whitespace into a single space character and uses the result as content between the elements.  Thus, the two articles require 900 pxiels total plus a few more pixesl to account for hte space character.  Since that exceeds the 900-pixel width of the `section`, the two `article`s no longer fit on the same line.\n\nThis kind of problem often occurs when on fo the element is an inline-block; the rest of the time, the extra space typically doesn't matter. aside form placing the two tags up against each other to eliminate the whitespace, there are several other techniques you will see later that let you remove the space ore make it invisible. \n\n###Padding and Margins\n\nBeginners often get confused by padding and margins.  Afterall, both provide whitespace that surrounds an element.  In this assigmnet, we'll learn the differences and how and when you should use each.\n\n####What is the differene between Padding and Margins?\n\nBoth padding and margins surround elements with whitesapce.  padding lies inside the border, while margins lie outside it.  What if you don't have one?  You do - it has zero-width, so it's an invisible border, but the browser knows it's there and uses it in the box model. \n\nMargins are tupically transparent, while the padding is opaque.\n\nPut another way, padding is part of the visible and clickable bounds of an element, while a margin is spacing between adjacent elements.  It's easy to see this with clickable element,s if you click on the content area or anywhere in the padding border, the browser will process the clikc>  if you click on the margin, nothing happes.  consider this example:\n\n```html\n<!--\nDon't worry about contents of this <script> tag: it is JavaScript.  We need it to impement the color toggle, but you don't need to understand it right now.  You'll learn all about JavaScript in future courses.\n-->\n\n<script>\n  var article = {\n    toggleColor: function() {\n      document.querySelector('article').classList.toggle('toggled');\n    }\n  };\n</script>\n\n<!--\nThe onclick attribute on the article tag causes the browser to run the JavaScript above when the user clicks the <article> element.  Don't bother memeorizing this right now.\n-->\n<section>\n  <article onclick=\"article.toggleColor();\">\n    Click here\n  </article>\n</section>\n\n```\n\n```\n  section {\n    background-color: #ffc0c0;\n    border: 1px solid black;\n    height: 300px;\n    margin: 0;\n    padding: 0;\n    width: 300px;\n  }\n  \n  article  {\n    background-color: #c0c0ff;\n    border: 30px solid blue;\n    box-sizing: border-box;\n    height: 200px;\n    margin: 40px;\n    padding: 50px;\n    width: 200px;\n  }\n  \n  /* The JavaScript code above turns this class on and off in the <article> */\n  \n  .toggled {\n    background-color:c0ffc0;\n    border: 30px solid green;\n```\n\nIf you click anywhere inside the inner (blue) box, the box turns green; clcik again, and it becomes blue once again.  Click elsewhere on the page (including on the light red area of the outer box (the margin oof the inner box) and nothing happens.  this behavior shows that the padding is part of the element, but hte margin is not.  (if you clikc on the blue or green border directly, you'll see that it's also clickable)\n\n### Margins, padding, and backgrounds\n\nThe background of an element appears in the padding area, while that of a container shows through the contained element's margins. Thus, the interior of hte inner box is light blue or green (the inner box's backgournd color).  However the surrounding ara is pale red (the outer box's backgournd). \n\n### Top and Bottom Margins and Padding on Inline Elements \n\nAs we learned earlier, the browser doesn't use the top and bottom margins and padding for `inline` elements for spaceing.  New developers often forget this, which leads to headaches as they try to figure out why the margins or padding aren't working the way they expect.  No matter how big the top and bottom margins are on an `inline` element, they do not affect the placement of the eleemnt's content nor the content surrounding it.  See the example under **Borders, padding, and Inline Elements** in **The Visual Formatting Model assigment**.\n\n###Margin Collapse\n\nAn even bigger difference between margins and padding is that top and bottom margins \"collapse\" between `block` elements.  If you position two adjacent 'blocks one above the other, the margin between them isn't the sum of the bottom margin of the firs and the top margin of the second.  Instead the marign collapses to the larger of thhe two margins in question.  For instance, assume that we have the following HTML:\n\n```html\n<p>This is the first sentence</p>\n<p>This is the second sentence</p>\n```\nwe also have the following CSS:\n\n```\np {\n  margin-bottom: 15px;\n  margin-top: 32px;\n}\n```\n\nThe spacing between the two paragraphs won't be 47 pixels - it'll be 32 pixels.\n\nMargin collapse occurs with top and bottom margins, not with left and right margins.  Padding does not collapse.\n\n### Should I use Padding or Margins?\n\nThere's no firm answer to this question, but one useful strategy is to use margins for spacing between element,s and padding to affect the visible or clickable area of one.  Within a container, use padding for horixontal separation between its edges and content, and margins for the verticl distance.\n\nThis approach works well but somtimes leaves you wondering about the correct choice, Another technique is to use margins eveywhere except when you need padding. You probably need to use padding when:\n\n- You want to change the height or width of a border.\n- You want to adjust how much background is visible around and element. \n- you want to alter the amount of clickable area.\n- You want to avoid margin collapse.\n- YOU want some horizontal spacing to the left or right of an `inline` element.\n- As before, use padding to separate the left and right sides of a container form its contents. USe margins for the vertical gap. \n\nThis approach is a simple mechnical process: ask youself whether any of the above options apply to the element.  IF any do, use padding to provide those features. Otherwise, use margins.  this strategy doesn't guarantee that you will make the correct choice between padding and margins in every situation. however it should hlep you chosse the right porperoty most of the time. \n\n### Dimensions\n\nSome CSS properties require lengths as property values to provide the sie of some detail on the page.  For instance, we've used the `width`, `height`, `margin`, `padding` and `border` properties to specify the characteristics of element boxes and theri attributes.  We've also seen a few instances of using `font-size` to specify the text size.  Each of these properties includes a length specification, such as `12px`, `3rem`, or `50%`; we call these values *measurements* or *dimensions*.  We also call `px`, `rem`, `%` etc. *measurement units* or *units*. \n\nBefore we begin, take some time to read the pages on lengths and percentages at MDN. Don't try to memorize all the different dimensions (notably thos marked as experimental), but get a feel for what is available. In this course, we will chiefly use `px`, `rem`, `em` and `%`.\n\n### Absolute vs. Relative Units\n\nWe measure eveyrhtint usig either *absolute* or *relative* units. In the real world, most of use know and use both.\n\nReal world absolute units include inches, feet, meters, millimeters, furlongs, etc.  We base these units on a standard system of measures that nearly everybody agrees on: a meter in Japan is the same as a meter in madagascar which is the same as a meter in the USA (If the USA used meters, that is).  Absolute measures don't changed depending on circumstances.\n\nRelative units are scare in the modern world, but they were common in days-gone-by.  For instance, a **hand** was once defined as the width of a person's hand measured across his fingers.  Not everybodys' hands were the same size, and some poeple included his though while others excluded,. \n\n#### Absolute Units\n\nCSS has one absolute unit of significance: the *pixel*.  Most peole think of the pixel as a single spot of light on your computer's display, and with good reason - we use the term pixel to describe them.  In CSS, pixels are similar, but the actual term implies a lot more meaning; we'll discuss that below.  To use pixels in your CSS dimensions, append the letters `px1 to the value. \n\n#### physical Vs. Reference Pixels\n\nThis sections dives into some technical territory that you don't need to know in detail but should recognize. \n\nThere's a problemw with using pixels as an absolute unit:  a pixel on a desktop computer and a pixel on a cell phone aren't the same size.  \n\nTo get around the pixel size problem, CSS distinguishes between a *physical pixel* (also *device pixel* or *display pixel*) and what we call the *CSS reference pixel* (or *CSS pixel* or *reference pixel*).  The size of a reference pixel is the size of a pixel on a display that has 96 pixels per inch.  However, if yo're working on a high-resolution display, you might have 192 pixels per inch.  To account for this, CSS will use a total of four physical pixels on the high-resolution display for each CSS pixel.  Remember that pixels are 2-dimensional, so we ned four high-resolution pixels to equal one low-resolution pixel.)  Without this trick, images that look okay on a low-resolution screen appear much smaller when viewed on a high-resolution display of the same physical size.  Instead, browsers use CSS pixels, so the image seems to be about the same size on both low- and high-resolution screens. \n\nEven so, this isn't a complete solution to the problem of absolute pixel units. If you place a 27-inch desktop display and a 5-inche phone side-by-side and view the same 200-pixel by 200-pixel images on both devices, the images will not appear to be the same size. To account for this, CSS defines the reference pixel based on the *angular* diameter of a CSS pixel *as viewed form the typical viewing distance (tVD) for the display*. \n\n##### *Other Absolure Units*\n\nCSS supports other absolute units, including inches and millimeters, but your won't use these units often.  In theory, a CSS inch should appear to be 1 inch on a screen at the TVD since a CSS inchs is 96 pixels.  If you measure the length of that inche with a rule,r though, it might be larger or smaller than an actual inche. \n\n##### relative units\n\nCSS provides a handful of realtive units of inters: the *em*, the *rem*, percentages as well as a few others. \n\n##### Ems and Rems\n\nEms and rems are proportional to the *calculated* and *root* font sizes, respectively.  The calculated font size is the height of the current font in pixels.  The root font size is the height of the base font for the document: the font size designated for the `html` element.  IF the calculated font size is 20 pixels and the root font size is 16 pixels, then `1.5em` is `30px`(20*1.5) while the `1.5rem` is `24px`(16* 1.5)\n\n`In most cases, you should use pixels to specify the root font size.  SOme developers use ems or rems to give the user some contorl over the font, but this can result in odd behavior as you precisely positioned items start to overfulow, overlap each other, or rearragne themselves on the page.\n\nBugs in some older browsers make it a good ide to set the root font size in both the `html` and `body` elements. Always use pixels when you do so.\n\nYou may find it easier to work with rems instead of ems since rems are consitent. Once you've st the root font size for a doc, `1.5rem` means the same thing everywhere in that document.  This realtionship isn't true for ems; they compound. \n\n```\n<h1>Using `em` Units</h1>\n<div class=\"a-em\">\n  1em == 1 * 24px == 24px\n  <div class=\"b-em\">\n    1.5em == 1.5 * 24px == 36px\n    <div class=\"c-em\">\n      2em == 2 * 36px == 72px\n      <div class=\"a-em\">\n        1em == 1 * 72px == 72px\n      </div>\n    </div>\n  </div>\n</div>\n\n<hr />\n\n<h1>Using `rem` Units</h1>\n<div class=\"a-rem\">\n  1rem == 1 * 24px == 24px\n  <div class=\"b-rem\">\n    1.5rem == 1.5 * 24px == 36px\n    <div class=\"c-rem\">\n      2rem == 2 * 24px == 48px\n      <div class=\"a-rem\">\n        1rem == 1 * 24px == 24px\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n```\nhtml, body { font-size: 24px; }\n\n.a-em { font-size: 1em; }\n.b-em { font-size: 1.5em; }\n.c-em { font-size: 2em; }\n\n.a-rem { font-size: 1rem; }\n.b-rem { font-size: 1.5rem; }\n.c-rem { font-size: 2rem; }\n\n```\n\n\npay attention to the difference between the 1em and 1rem lines at the final level.  You can't go back to the original font size by specifying `1em` but `1rem` takes yo back directly to the original font size. You may also notice that the `1.5em` and `1.5rem` items use the same font sie in this instnace, but the `2em` line is noticelably larger than the 2rem line since the calculated font size is larger than the root. \n\nThis compoudning makes ems hard to use and maintain.  Some browsers, though, don't recognize rems; if you must support such browsers, use a *fallback* unit:\n\n```\np {\n  font-size: 20px; font-size: 1.25rem;\n}\n```\n\nThis CSS tesll the browser to use `1.25rem` as the fon size.  If the browser doesn't recognize rems, it falls back to `20px`. Placing both value son the same line makes the presence of a fallback easier to see, but it isn't required.\n\n```\nWe chose `20px` as the fallback value since most (not all) browsers default to `16px`, which makes `1.25rem` equivalent to 20px. If you must use fallbacks, assuming a `16px` default font-size is your best bet. \n```\n\n*Percentages*\n\nTechnically, CSS doesn't consider percentages as a length value, but this distinction doesn't matter much at this stage.  You can ue them to define dimensions as a fraction of the containser's width or height.  If you place a `block` or `inline-block` element in a container and set it to `width: 50%`. the element's widht is 50% of the width of the container. Likewise, if you need a height of one-quearter of the container's height, use `height: 25%`\n\nRemember: `width` and `height` have no effect on `inline` elements\n\n###Auto\n\nThe `auto` specifier aslo isn't a length value, b ut you can use it when you want to let the browser deteremine a width or height foer you..  It's specific role deponds on where you use it, but its most common uses are:\n\n- As a `width` or `height` it tells the brwoser to try to fit the entire element (including its margines) in its container.\n- As a left or right `maargin` value on a block element, it tells the browser to push the element all the way right or left (not the reversal) insider its container.  You can cneter a blcok element by setting both left and right margins to `auto`. See below.\n- As a top or bottom `margin` value, `auto` is equivalent to `0`.\n- Padding does not accept `auto` values.\n\nNew developer sometiems assuem that `auto` and `100%` are the same, but they are not. FOr example if you use `width: auto` the browser tries to pu the entire element, including it margins broder and padding within the container. IF you use `width: 100%` instead, the browser won't consdier the margins when it calculaters the required element size.  Thuse, the element may extend beyond the bounds of the container.  Furhtermore, if you use the `content-box` box-szing model, the browser won't consider the border and padding when dtermining the requried size.  For example:\n\n```\n<div id=\"auto-width\">\n  <div id=\"auto-width-auto\">width: auto</div>\n  <div id=\"auto-width-100-border\">width: 100%; box-sizing: border-box;</div>\n  <di id=\"auto-width-100-content\">width: 100%; boxsizing: content-box;</div>\n</div>\n```\n\n```\n#auto-width {\n  background-color: cyan;\n  border: 1px solid gray;\n  font-family: monospace;\n  text-align: center;\n  width: 730px;\n}\n\n#auto-wdith div {\n  background-color: #ffe0e0;\n  border: 10px solid red;\n  margin: 10px;\n  padding: 10px;\n  text-align: left;\n}\n\n#auto-width {\n  width: auto;\n}\n\n#auto-width-100-border {\n  box-sizing: border-box;\n  width: 100%;\n}\n\n#auto-width-100-content {\n  box-sizing: content-box;\n  width: 100%;\n}\n```\n![Screen Shot 2021-02-09 at 3.51.10 PM.png](quiver-image-url/33D874AE74FC51848934C7B1B9A2975D.png =851x266)\n\nHere we ee `auto` used with `margin` to center and right align a (non-inline) element inside its container without also altering the element's content like `text-align` would:\n\n```\n<div id=\"center-margin-auto\">\n  <div id=\"center-margin-auto-center\">centered</div>\n  <div id=\"center-margin-auto-right\">right</div>\n</div>\n```\n\n```\n#center-margin-auto {\n  background-color: cyan;\n  border: 1px solid gray;\n  width: 780ps;\n}\n\n#center-margin-auto div {\n  background-color: #ffee0e0;\n  border: 10px solid gray;\n  width: 780px;\n}\n\n#center-margin-auto-center {\n  margin: 10px auto;\n}\n\n#center-margin-auto-right {\n  margin: 10px 10px 10px auto;\n}\n```\n\n![Screen Shot 2021-02-09 at 3.58.15 PM.png](quiver-image-url/C4289ADFC4EA232E3BC5A08C28A3277B.png =795x161)\n\n#### Zero Lenghts\n\nStandard CSS style omits the units when providing a length of 0 units.  FOr example, if you want no margins on `blockqoute` elemetns, you can add the following to your CSS:\n\n```\nblockqoute {\n  magin: 0\n}\n```\nWe omit the units here since 0 is the same in all units. \n\n#Mixing Units\n\nYou can freely mix units anywhere you want on a page: you can use pixels for some element,s rems for others, `%` and `auto` even within a signle element's styling:\n\n```\np {\n  border: 1rem solid red;\n  height: auto;\n  margin: 10px;\n  padding: 0.5em 10vw 0.5in 18pt;\n  width: 80%;\n}\n```\n\nBe careful, though: mixing and matching units can lead to problems when you need to determine the \"right\" length to make something come out correct. consider:\n\n```\n<div class=\"a\">\n  <div class=\"b\"></div>\n  <div class=\"c\"></div>\n</div>\n```\n\n```\ndiv {\n  border: 1px solid black;\n  height: 50px;\n}\n\n.a {\n  width: 500px;\n}\n\n.b {\n  display: inline-block;\n  margin: 0 50px;\n  width: 25%\n}\n\n.c {\n  display: inline-blcok;\n  margin: 0 1rem;\n  width: ???;\n}\n\n```\n\nWhat `width` should you provide to the `.c` slector to ensure that the outer box is precisely large enough to contain both the `b` an `c` boxes?\n\nUsing `box-sizing: boder-box` can help in siutaitons liek this, provided you aren't also using left or right margins on the inner boxes.\n\n### When to use th different UNits\n\nTrying to decide which dimensional units you should use is sometiems idficult.  HEre are some general guidelines- none of these are absolute and you will almost certainly find dvelopers that disagree:\n\n- Use absolute units sparingly and stick with pixels.  Piexels work well for:\n  - The root font size\n  - image widths and heights\n  - top and bottom margins and paddings, sometimes useful with left and right margins and padding\n  - width of height of fixed-width/fixed-height containers usch as navigation sidebars\n  - border widths\n  \n- Use relative units liberally:\n  - Use rems for fonts, possibly with a fall back to ems or pixels.  The root font should use pixels.\n  - If you must use ems instead of rems, tyr to avoid comounding font sizes.\n  - Use rems, ems, or pixels for left and right margins and padding.\n  - Use `%` for measuremnts that are proportional to the container element's width or height.  Percentages work best for container dimesnions and come in handy when you want certain ares of the page to grow and shrink as the width of the brwoser windo changes.\n  - Use `auto` with `width` and `height` to let the browser calcualte an appropriate value.\n  - Use `auto` with left and right margins to left, center, or right justify a blcok element within its container.\n  \n\n\n\n"
    }
  ]
}