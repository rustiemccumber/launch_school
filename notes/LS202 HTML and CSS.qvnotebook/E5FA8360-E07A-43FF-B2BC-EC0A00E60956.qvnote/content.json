{
  "title": "Mater notes",
  "cells": [
    {
      "type": "markdown",
      "data": "\n##lesson 1: your first webpages\n\n### introduction\n\n####Vocabulary*:\n\n#####elements:\n\nElements are designators that define the structure and content of objects within a page. Some of the more frequently used elements include multiple leveles of headins (identified as `<h1>` through `<h6>` elements) and paragraphs (identified as the `<p>` element); the list goes on to include the `<a>`, `<div>`, `<span>`, `<strong>`, and `<em>` elements, and  many more. \n\nElements are identified by the use of less-than and greater-than angle brackets, `<>`, surroudning the element name.  THus, an element will look like the following: `<a>`.\n\n#####tags\n\nThe use of less-than and greater-than angle brackets surrounding an element creates what is known as a *tag*.  Tags most commonly occur in paris of opening and closing tags. \n\nAn **opening tag** marks the beginning of an element.  It consists of a less-than sign followed by an element's name, and then ends with a greater-than sign; for example, `<div>`.\n\nA **closing tag** markst the end of an element.  It consists of a less-than sign followed by a forward slash and the element's name, and then ends with a greater-than sign; for example, `</div>`\n\nThe content that fallows between the opening and closing tags is the contenet of that element.   An anchor link, for example will have an opening tag of `<a>` and a closing tag of `</a>`.  What falls between these two tags will be the content of the anchor link.\n\nSo, anchor tags will look a bit like this:\n\n```\n<a>...</a>\n```\n\n- self-closing tag:\n- documnet type definition (DOCTYPE, DTD):\n\n##### attribute:\n\nAttributes are properties used to provide additional information about an element.  THe most common attributes include the `id` attribue, which identifies an element' the `class` attribute, which classifies and element; the `src` attribute, which specifies a source for embeddable content; and the `href` attribute which provides a hyperlink reference to a linked resource. \n\nAttributes are defined within the opneing tage, after an element's name. Generally attributes include a name and a value.  THe format for these consists of the attribute named followed by an equals sign and then a qouted attribute value.  For example.  an `<a>` element including an `href` attribute would look like the following:\n\n```\n<a href=\"http://shayhowe.com/\">Shay Howe</a>\n\n```\n![Screen Shot 2021-01-22 at 2.45.26 PM.png](quiver-image-url/BB37331B18198FE399A2E80B043A3C32.png =595x119)\n\nNow that you knwo what HTML elements, tags, and attributes are, let's take a look at putting together our first web page.  If anything looks new here, no worries -- we'll decipher it as we go.\n\n### Setting up the HTML Document structure\n\nAll douments have a required structure that includes the following declaration and elements: `<!DOCTYPE html>`, `<html>`, `<head>`, and ,`<body>`\n\nThe documnet type declaration, or `<!DOCTYPE hme>` informs web broswers which version of HTMl is being used and is placed at the very beginning of the HTML documnet.  Because w'll be using the latest version of HTML, our document type declaratin is simply `<!DOCTYPE html>`.\n\nall of the visible content within the web page will fall within the `<body>` element.  A breakdown of a typical HTML documnet structure looks like this:\n\n```\n<!DOCTYPE html>\n<html lang=\"eng\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World</h1>\n    <p>This is a web page.</p>\n  </body>\n</html>\n\n```\n\nThe precedining code shows the deocumnet begining with the document type declaration, `<!DOCTYPE html>` followed directly by the `<html>` element.  Inside the `<html.` ELEMNT COME THE `<HEAD>` AND `<BODY>` ELEMENTS.  THE `<HEAD>` ELEMENT INCLUDES THE CHARACTER ECONODRING  OF THE PAGE VIAE THE `<meta charset=\"utf-8\">` tag and the title of the doucment via the `<title>` element.  The `<body>` element includes a heading via the `<h>` element and a paragraph via the `<p>` element.  BEcause both the heading and paragraph are nested within the `<body>` elemnt, they are visible on the web page. \n\n*self-closing elements*\n\nIn the previous exaple, the `<meta>` element had only one tag and didnt' include a closing tag.  Fear not, this was intentional.  Not all elements consit of opening and closing tags.  Some elemtns simply recie their content or bechaior from attributes with a singe stable . \n\n- `<br>`\n- `<img>`\n- `<meta>`\n- `<wbr>`\n- `<embed>`\n- `<input>`\n- `<param>`\n- `<hr>`\n- `<link>`\n- `<source>`\n\n####Understanding Common CSS Terms\n\nIN addition to HTML terms, there are a few common CSS terms you will want to familiarize yourself with.  These terms include **selectors**, **properties**, and **values**.  As with the HTML terminology, the more you work iwht CSS, the more these terms \n\n*SELECTORS*\n\nAs elemetns are added to a web page, they may be styled using CSS.  A selector designates exactly which element or elements within our HTML to target and apply styles (such as color, size, and position) to. Selectors may include a combination of different qualifiters to select unique elements, all depending on how specific we wish to be.  FOr example, we may want to select eery paragraph on a page, or we may want to select only one specific paragraph on a page.\n\nSelectors generally target an attribute value, such as an `id` or `class` calue, or target the type of elemetn, such as `<h>` or `<p>`.\n\nWithin CSS, selectors are followed with curly brackets, `{}` which encompass the styles ot be applied to the selected element.  The selctor here is targeting all `<p>` eleemtns.\n\n```\np { ... }\n```\n\n*Properties*\n\nonce an element is selected, a property determines the styles that will be applied ot that element.  Property names falll after a selector, within the curly brackets, `{}` and immediately preceding a colon, : There are numerous properties we can use, such as `background`, `color`, `font-size`, `height` and `width` and new properties are often added.  In the following code, we are defining the `color` an `font-size` properties to be applied to all `<p>` elements \n\n```\np {\n  color: ...;\n  font-size: ...;\n}\n```\n\n*Values*\n\nSo far we've selceted an element with a selctor and deteremined what style we'd liek to apply with a property.  Now we can determine the behaviour so that property with a vlaue.\nValues can be identified as the tet between the colon, :, and semicolon, ;.  Here we are selcting all `<p>` elements and setting the value of the `color` property to be `orange` and the value of the `font-size` property to be 16 pixles.\n\n```\np {\n  color: orange;\n  font-size: 16px;\n}\n```\n\nTo review, in CSS our rule sets begins with the selctor, which is immediately followed by curly brackets.  Within these curly brackets are declarations consisting of perperty and value pars.  Each delcatiorn begins with a proeprty, whcih is fllowed by a colon, the proeprty value, and finally a semi colon.\n\n![Screen Shot 2021-01-27 at 2.07.27 PM.png](quiver-image-url/08D1F4024A316C619E3F1728E70087FC.png =308x164)\n\nKnowing a few common terms and the general syntax of CSS is a great start, but we have a few more items to learn before jumping in too deep.  Specifically we need to take a closer look at how selectors work with CSS.\n\n*Working with Selectors*\n\nSelectors, as previously mentioned, indicate which HTML elements are beign styled.  It is important to fully understand how to use selctors and how they can be leveraged.  The first step is to become familiar with the different types of selctors.  We'll start with the most common slectors: `type`, `class` and `ID` selectors.\n\n*Type Selctors*\n\nType selectors target elements bye their elemetn type.  For example, should we wish to target all division elements, `<div>` we would use a type selctor of `div`.  The following code shows a type selector of `div`.  The folloiwng code shows a type selctor for division element as well as the corresponding HTML it slects.\n\n`CSS`\n```\ndiv { ... }\n```\n\n`HTML`\n```\n<div>...</div>\n<div>...</div>\n```\n\nClass Selectors\n\nClas selectors allow us to selct an element based on the elemtns' clas attribute value.  Class selctors are a little more specific than type selectors, as they slect a particular group of elements rather than all elements of one type.\n\nClass selectors allow us to apply the same styles of dfferent elemtns at once by using the same class attribute value across multipe elemtns. \n\n`CSS`\n```\n.awesome { ... }\n```\n\n`HTML`\n```\n<div class=\"awesome\">...</div>\n<p class=\"awesome\">...</p>\n```\n\n*ID Selectors*\n\nID selctors are even more preceise than class selctors, as they target only one unique element at a time.  Just as class selectors use and element's class attribute value as the selctor, ID selctors us an element's ide attribute value as a selector.\n\nRegardless of which type of element they appear on, `id` attribute values can only be used once per page.  If used they should be reserved for signicant elemetns.\n\nWithin CSS, ID selectors are denoted by a leading hash sign, #, followed by the id attribute value.  Here the ID selctor will only selectr the element containing the id attribute value of `shayhowe`.\n\n`CSS`\n\n```\n  #shayhowe { ... }\n```\n\n`HTML`\n```\n<div id=\"shayhowe\">...</div>\n```\n\n*Additionall Selectors*\n\nSelecotrs are extremely powerfuel, and the selectors outlined here are the most common slectors we'll come accross. These selectors are also only the beginning.  Many more advanced slesctors exist and are readily available.  When you feel comfortable wiht these selctors.  Don't be afraid to look into some of the more advance slectors.\n\n####Referencing CSS\n\nin order to get our CSS talking to our HTML, we need to reference our CSS file within our HTML.  The best practice for referencing our CSS is to include all of our stuyle sin a single external style sheet, which is referenced from within the `<head>` element of our HTML documnet. \n\n```\n<head>\n  <link rel=\"stylesheet\" href=\"main.css\">\n</head>\n```\n\nIn order for the CSS to render correctly, the path of the href attribute value must directly correlate wo whee out CSS file is saved. \n\nIn ther precedding example the `main.css` file is stored wihtin the same locaiton as the HTML file, aslo known as the root directory.\n\nIf our CSS file is within a subdirectory or subfold, the href attribute value needs to correlate to this path accordinluyg. For example if our `main.css` file were stored within a subdirectory named `stylesheeets`, the `href` attribute value would be `styles/main.css`, using a forward slash to inicating moving intoa subdirc.\n\n*Using Css RESETS*\n\nown styles for different eleemnts.  How Google Chrome renders heeadings, paragprahs, list, and so forth may be different from how Internet Explorer does. To ensure cross-browser copatibility, CSS restes have become widely used. \n\nCSS resets take every comon HTML eleemtn with a predfined style and provide one unified style for all browsers.  These rests generally involve removing any sizing, margins, paddings, or additional styles and toning these values down.  \n\nThere are a bunch of didferent resets avialbel to use, all of which have their own fortes.  \n\n#Getting to know HTML\n\n###Semantics Overview\n\nSemantics within HTML is the practice of giving content on the page meaning and structure by using hte proper element. Semantic code describes the **value** of content on a page, regardless of the style or appearnce of that content. \n\n### Diviions & Spans\n\nDivisions, or `<div>`s and `<span>`s are HTML elements that act as containers soleyu for styling purposes.\n\nAs generic containers, they do not come with any overarching meaning or semantic value. Paragraphs are semantic in that content wrapped within `<p>` element is known and understood as a paragraph.  `<div>`s and `<span>` do not hold any such meaning and are simply containers.\n\n`<div>` is a block-level element that is commonly used to identify large groupings of content, and which helps to build a web page's layout and design. \n\nA `<span>` on the other hand, is an inline-level element commonly used to identify smaller groupings of text within a block-level element. \n\nWe'll comonly see `<div>` and `<spans>` with `class` or `id` attributes for styling purposes.  Choosing a class or id attribute value, or name, requires a bit of care.  We want to choose a value that refers to the content of an element, not necessarily the appearance of an element. \n\nFor example, if we have a `<div>` with an orange background that contains social media links, our first thought might be to give the `<div` a class value of orange. if this is changed to blue it no longer makes since.  a more sensible choice for a class value would be social, as it pertains to the contents of the `<div>` not hte syle\n\n```html\n<!-- Division -->\n<div class=\"social\">\n  <p>I may be found on..</p>\n  <p>Additionally, I have a profile on...</p>\n</div>\n\n<!-- Span -->\n<p>Soon we'll be <span class=\"tooltip\">writing HTEML</span> with the best of them. </p>\n\n```\n\n*comments with HTML and CSS*\n\nHTML comments start with `<!-- and end with -->`\nCSS comments tart with \n\n####using Text-Based elements\n\n#####Headings \n\nHeadings are block-level elements, and they come in six different rankings, `<h1>` through `<h6>`.  Headings help to quikcly break up content and establish hierarchy and they are key indetifiers for user reading a page. \n\nHeadings should be used in an order that is relevatn to the content of a page. \n\nEach heading level should be used where it is semantically valued, and should not be used to make text bold or big.\n\n#####Paragraphs\n\nHeadgins are often followed by supporting paragraphs.  Paragraphs are defined using the `<p>` block-level eleemnt. \n\n#####Bold text with Strong\n\nstrong: `<strong>` eleemnt is semantically used to give **strong** importance to text, and is thus most popular option for bolding text.\n\nbold: `<b>` eleemtn on the other hand, semantically measn tos **stylistically offset** text, which isnt' always the best choice for texting deserving prominent attention. \n\nHere are the tow HTML options for creating bold text in action:\n\n```\n<!-- Strong importance -->\n<p><strong>Caution:</strong> Falling rocks. </p>\n\n<!-- Stylistically offset -->\n<p>this recipe calls for <b>bacon</b> and <b>baconnaise</b>.</p>\n\n```\n\n##### Italicize Text with Emphasis\n\nTo italicize text, therby palcing emphasis on it, we'll use the `<em>` inline-level element. \n\nthe `<em>` element is used sematically to place a **stresed emphasis** on text;  it is thus the most popular option for italicizing text.  \n\nThe `<i>` is used semantically to convey text in an **alternative voice** or **tone**, almost as it it were placed in quotationd makres.  \n\n```\n<!-- Stressed emphasis -->\n<p>I <em>love</em> Chicago!</p>\n\n<!-- Alternative voice or tone -->\n\n<p>the name <i>Shay</i> means a gift.</p>\n\n```\n\n#####Building Structure\n\nFor the longest time the structure of a webpage was built using dvisions.  The problem was that divisions provide no semantic value, and it was fairly difficult to determine the intnetion of these divisions.  Fotunarly HTML5 introudced new **structurally based elemetns**, including the `<header>`, `<nav>`, `<article>`, `<section>`, `<aside>` and `<footer>` elements\n\n\nAll of these elemetns may be usedmultipe timees per page, so long as each use refelcts the proper semantic meaning\n\n![Screen Shot 2021-01-28 at 12.24.53 PM.png](quiver-image-url/B927A5CCFCA382B77378D9D76F331912.png =615x427)\n\n#####Header \n\nThe `<header>` element, like it sound sis used to identify the top of a page, article, seciton or other segment of a page.  In general, the `<header>` element may include a heading, introductory text, and even navigation\n\n```\n<header>...</header>\n```\n\n`<header>` *vs.* `<head>`*vs.* `<h1>` *through* `<h6>` *Elements*\n\nIt is easy to confusing the `<header>` element with the `<head>` elemnt or the heading elements, `<h1>` through `<h6>`.  They all have different semantic meanings and should be used according to their meanings. For reference...\n\nThe `header>` element is a structural element that outlines the heading of a segment of a page.  It falls within the `<body>` element.\n\n\nThe `<head>` element is not displayed on a page and is used to outline metadata, including the document tile, links to external files.  It falls directly wihtin the `<htmel>` element. \n\nHeading elements, `<h1>` through `<h6>` are used to designate multiple levels of text headings thorught a page. \n\n*Navigation*\n\nThe **<nav>** element identifies a section of major navigational links on a page.  The *<nav>* element should be reserved for primary navigation sections only, such as global navigation, a table of contents, previous/next links, or other notworthy groups of navigational links. \n\nMost commonly, links included within the `<nav>` elemetn will link to other pages within the same website or to parts of the same web page. Miscellaneous one-off links should not be wrapped within the `<nav>` element; they should use the ancor eleemnt, `<a>` and the anchor element alone. \n\n```\n<nav>...</nav>\n```\n\n*Article*\n\nThe *<article>* element is used to identify a section of independent, self-contained content that may be independently distributed or reused.  We'll often us the `<article>` element to mark up blog posts, newspaper articles, user-submitted content, and the like.\n\nWhen deciding whether to use the `<article>` element, we must determine if the content within the element could be replicated elsewhere without any confusion.  If the content within the `<article>` element were removed from the context of the page and placed, for example, within and eamil or printed work, that content should still make sense. \n\n```\n<article>...</article>\n```\n\n*Section*\n\nThe `<section>` element is used to identify a thematic grouping of content, whihc generally, but not alwasy, includes a heading. The groping of content within the `<section>` element may be generic in nature, but it's useful to identify all of the content as related.\n\nthe `<section>` elemetn is commonly used to break up and provide hierarchy to a page.\n\n```\n<section>...</section>\n```\n\n*Deciding Between* `<article>`, `<section>`, *or* `<div>` *Elements*\n\nAt times it becomes fairly difficult to decide which element--`<articel>`, `<section>`, or `<div>`--is the best element for the job based on its semantic meaing.  The trick here, as with every semantic decision, is to look at the content. \n\nBoth the `<arcilte>` and `<section>` elements contribute to a doucment's sturcutre and elp outline a document.  IF the content is being grouped solue for sytling pruposes and doesn't provide value to the outline of a documnet, us the `<div>` element.\n\nIf the content adds to the doucment outline and it can be independently redistributed or syndicated, ue the `<article>` element.\n\nIf the content adds to the document outline and represents a thematic groupr of contetn, ust he `<section>` element.\n\n*Aside*\n\nThe `<aside>` elemetn holds content, such as sidebars, inserts, or bried explanations, that is tangentially rleated to the content surouding it. When used within an `<article>` element, for example the `<aside>` element may identify content related to the aurthor of the artirlce. \n\nWe may instincitvely think of an `<aside>` element as an elemnt that appears off the left or right sdie of a page.  We have to remember, though, that ll of the sturcutral element,s including the `<aside>` element, are block-level eleemtns and as such will appear on na new line, occupying the full available widhto fo the page or of the lement they are nested within, aslo known as their partent element. \n\n```\n<aside>...</aside>\n```\n\nWe'll discuss how to change the position of an element, perhpas placing it to the right or left of a group of content, in Lesson 5, \"positioning content\"\n\n*Footer*\n\nThe `<footer>` element identifies the closing or end of a page, article, section or other segment of a page.  Generally the `<footer>` element is found at the bottom of its parent.  Content within the `<footer>` element should be relative information and should not diverge form the doucment or section it is included within. \n\n```\n<footer>...</footer>\n```\n\nWith sturctural elemetns and tet-based elements under out belts, our HTML knowledge is really starting to come togheer.\n\n##### Encoding Speical characters \n\nspecial characters include various puncutations markes, accented letters and symbols. when typed directly to HTML they can be misunderstood or mistaen for the wrong charcter; thus they need ot be encoded.\n\n###Creating Hyperlinks\n\nAlong with text, one of the core components of the Internet is the hyperlink.  Hyperlinks are established uisng the ancho, `<a>` inline-level element. in order to create a link form one page to another, the href attribue, known as hyperlink reference is required.  The `href` attribute value identifies the destination of the link.\n\n```\n<a href=\"http://shayhowe.com\">Shay</a>\n```\n\n#####Relative & Absolute Paths\n\nThe two most common types of links are links to other pages of the same website and links to other websites. \n\n```\n<!-- Relative Path -->\n<a href=\"about.hteml\">About</a>\n\n<!-- Absolute Path -->\n<a href=\"http://www.google.com/\">Google</a>\n```\n\n[reference list of encoding](https://copypastecharacter.com/)\n\n#####Linking to an Email Address\n\nTo create an email linke, the `href` atterubte avlue neds to start with `mailto:` followed by the email address to which the eamil should be sent. \n\nAdditionally, subject, body text, and other information for the email can be poplulated \n\n```html\n<a href=\"mailto:shay@awesome.com?subject=Reaching%20Out&body=How%20are%20you\">Email Me</a>\n\n```\n\n#####Opening Links in a New Window\n\n```html\n<a href=\"http://shayhow.com/\" target=\"_blank\">Shay Howe</a>\n```\n\n#####Linking to Parts of the Same Page\n\n```html\n<body id=\"top\">\n ...\n <a href=\"#top\">Back to top</a>\n ...\n</body>\n```\n\n##Getting to Know CSS\n\n###The Cascade\n\nWithin CSS, all styles cascade from the top of a style sheet to the bottom, allowing different styles to be added or overwritten as the style sheet porgresses. \n\nFor example, say we select all paragrpah elements at the top of our style sheet and set their background color to orange and their font size to 24 pix.  THen towards the bottom of out style sheet, we select all paragrapah sleements again and set their background color to green as sen here.\n\n```html\np  {\n  background: orange;\n  font-size: 24px;\n}\n\np {\n  background: green;\n}\n```\n\nBecause the paragraph selector that sets the bacground color to green comes after the paragraph selector that sets to background color to orange, it will take precdence in the cascade.  All of the paragraphs will appear with a green backgou.  The font size will remain 24 pic, bc sedcond paragraph didn't indentify a new font size.\n\n*Cascading Properties*\n\nThe cascade also works with properties inside individual selectors.\n\nThe fellwoing willl set the background to green\n\n```\np {\n  background: orange;\n  background: green;\n}\n```\n\nBecasue the green backgournd color declaration comes after the oragne, it will overrule the orange background. \n\nAll styles will cascade from the top or our style sheet to the bottom of our style sheet.  There are times when the cascade doesn't play nicely.  Those times occur when different types of selectors are used and the specifificyt of those selectors breaks the cascade.  Let's take a look.\n\n*Calculation Specificity*\n\nEvery selector in CSS has a specificity weight.  A selector's specificity wieght, along with its placement in the cascade, identifies how its styles will be rendered.\n\nthree comon tyles of slectors include *type*, *class*, and *ID* selectors.\n\n- The *type* selector has the lowest specifiity wieght and holds a point value of 0-0-1\n- The *class* selector has a medume specificity weight and holds a point value of 0-1-0.\n- The *ID* selector has a high specifity weight and holds a point value of 1-0-0.\n\nThe higher the specificity weight of a selectr, the more superiority the selector is given when a styling conflict occurs.  For example, if a paragraph element is selected using a type selector in one place and an ID selector in another, the ID selector will take precedence over the type selctor regardless of where the ID selector appears in the cascade\n\nHTML\n```html\n<p id=\"good\">...</p>\n```\n\nCSS\n```\n#food {\n  background: green;\n}\n\np {\n  background: orange;\n}\n```\n\nHere we have a paragraph element with an `id` attribute value of `food`.  Withint our CSS, the paragraph is being selected by two different kinds of selectors: one type selector and one ID selector.  Alothough tht e type selector comes after the ID selector in the cascade, the ID selector takes precednce over the type selecot rbecause it has a higher specificity wieght; consequently the paagraph will appear with a green background.\n\nThe specificity weights of different types of selectors are incredibly important to remeber.  At times styles may not appear on elements as intended and chances are the spcificiyt wieghts of our selectors are breaking the cascade, therefore our styles are not appearing properly.\n\n*Combining Selectors*\n\nSo far we've looked at how to use different types of selectors individually, but we also need to know how to use theres selcotrs toghetr.  By combing sleectors, we can be more specific about whch element or group of elements we'd like to select.\n\nFOr example say we watn tos elect all paragrpah elements that reside within an element with a class attrubute value of hotdog and se ttheir background clor to brown. Howver, if one of those paragprahs happens to have the calss attrubute value of mustard, we want to set its background color to yellow.  OUr HTML and CSS May look like the following:\n\n\nHTML\n```\n  <div class=\"hotdog\">\n    <p>...</p>\n    <p>...</p>\n    <p class=\"mustard\">...</p>\n  </div>\n```\n\nCSS\n```\n  .hotdog p {\n    background: brown;\n  }\n  \n  .hotdog p.mustard {\n    background: yellow;\n  }\n```\n\nWhen selectors are combined they should be read from right to left.  The selector fartherst to the right, directly before the opening curly braker, is known as the **key selector**.  The key selector indentitifes exactly which element the styles will be applied to.  Any selector to the left of the key selector will serve as a prequalifer.\n\nThe first combined selector above, `.hotdog p`, includes two selectors: a class and a type selector.  These two selectors are separated by a single space.  The key selector is a type selector targeting paragraph elements. and because this type selecgtor is prequalitfied with a class selector of `hotdog` the full combined selector will only select paragraph elemetns that resdie within reside within an eleemnt with a class attribute value of hotdog. \n\nThe second seldctor above, `.hotdog` `p.mustard` includes three selectors: two class selectors and one type selector.  The only difference between the second selector and the first selcotr is the addition of the class selecgtor of `mustard`  to the end of the paragraph type selector.  BEcause the new class selector, mustard, falls all the way to the right of the combined selctor, it is the key slector an all of the individual selctors combing before it are now prequalifiers. \n\nReading the combined selector from right to lef,t it is targeting parapgrahs with a class attribute value of mustard that resdie within an eleemnt with the calss attribute value of hotdog. \n\n*Specificity within combined selectors*\n\nWhen selector are combined, so are the specificty weights of the individual selectors. These combined specificity weights can be calculated by counting each different type of slector within a scombined slector.\n\nLooking at our combine selctors from before, the firs secltor, `.hotdog p`, had both a class selector and a trype selctor.  Knowing that the point value of a clas selctor is `0-1-0` and the point value of a type selector is `0-0-1` the total combined point value would be `0-1-1`, found by adding up each kind of selector. \n\nThe second selector, `.hotdog` `p.mustard` had two class selectors and one type selcector. Combined the selctor has a specificity point value of `0-2-1`.  THe `0` in the first column is for zero ID selctors, the `2` in the second column is for two class selctors, and the  in the last coulmn is for one type selctor. \n\ncomparing the two selectors, the second selector with tis two classes, has a noticeably higher specificity weight and point value.  As sucht it will take precednce within the cascade.  IF we were to flip the order of these selctors within our style sheet, placing the higher-weighte above the lower-weighted selector as shown here, the appearnce of their styles would not affect due to each selctors sepcificty weight\n\n```html\n.hotdog p.mustard {\n  backgournd: yellow;\n}\n\n.hotdog p {\n  background: brown;\n}\n```\n\n#### Layering styles with multiple classes\n\nOne way to keep the specificity of weights of our slectors low is to be as modular as possibe, sharing similar styles form element to element.  And one way to be as modular as possible is to layer on different styles by using multiple classes.\n\nElements within HTML cna have more than one class attribute value so long as each value is space sepearted, with that, we can place certain styles on al elements of one sort while place other styles only on specific elements of that sort.\n\nwe can tie styles we want to continually reuse to one class and layer on additional styles form another class.\n\nLet's take a look at buttons, for example.  Say we want all of our buttons to have a font size of 16 pix, but we watn the bakcougn color of our buttons to vary depending on wehre the buttons are used.  We can create a few classes and layer them on an element as necessary to apply the desired styles.\n\nHTML\n\n```\n<a class=\"btn btn-danger\">...</a>\n<a class=\"btn btn-sucess:>...</a>\n\n```\nCSS\n\n```\n.btn {\n  font-size: 16px;\n}\n.btn-danger {\n  background: red;\n}\n.btn-succes {\n  background: green;\n}\n```\n\nHere you can see two anchor element,s both with multiple class attribute values.  The first class, btn, is used to apply a font size of 16 pixels to each of the elements.  Then, the first anchor element uses an additional class of `btn-danger` to apply a `red` backgourn color while the second anchor element uses an additional class of `btn-success` to apply a `green` background color. OIur styles here are clean and modular.\n\nUsing multtiple classes, we can layer on as many styles as we wish, keeping our code learn and our sepcificity weights low.  Much ike understanidn the cascade and calculating the specificity, this is a practice that will take time to fully absorb, but we'll get better wieht each lession. \n\n### Common CSS Property values\n\nwe've used a handful of common CSS property values already, such as the keyword color values of red and green.  You may not have throught too much about them  that's okay. We're going to take time now to go over some previously used property values as well as to explore some of the more common propoerty values that we'll soon be using. \nSpecifically, we'll look at properoty values tha relate to colors and length measurements. \n\n#### colors\n\nAll color values withint CSS are defined on an sRGB (or standard red, gree, and blue) clor space.  Colors within this space are formed by ixing red, green, and blue color channels together, mirroring the way that televisions and monitors generate all the different colors they display. By mix9ing different levels of red, greeen, and blue, we can create millions of colors-- and find nearly any color we'd like. \n\nCurrently there are four primary ways to represent sRGB colors within CSS: keywords, hexadecimal notation, and RGB and HSL values.\n\n#### Keyword Colors\n\nKeyword color values are names (such as red, green, or blue) that map to a given color.  These keyword names and their corresponding colors are determined by the CSS specification.  Most common colors, along with a few oddities, have keyword names.\n\n![Screen Shot 2021-02-01 at 1.55.07 PM.png](quiver-image-url/56726C9FF5778501922E405FB1B899EC.png =702x1284)\n\nHere we are appplying a maroon background to any element with the taks class attribute value and a yellow backgournd to any element with the count class attribute value.\n\n``` html\n.task{\n  background: maroon;\n}\n\n.count {\n  background: yellow;\n}\n```\n\nwhile keyword color values are simple in nature, they provide liited options and thus are not the mos tpopular color calue choice\n\n###Lenghts\n\nLength values within CSS are similar to colors in that they are handful of different types of values for length, all of which serve distinct purposes. There are two forms of length values, absolute and relative. \n\n####Absolute Lengths\n\nAbsolute length values are the simplest length values, as they are fixed to a physical measurement, (inches, centimeters, or millimeters).  The most popular absolute unit of measuremnt is known as the pixel and is represented by the px unit notation.\n\n####Pixels\n\nThe pixel is euql to 1/96th of a inch; thus there are 96 pixels in an inch.  The exact measurment of a pixel, however, may vary slightly between high-desnity and low-density view devices. \n\nPixels have been around for quite some time and are commonly used with a handful of different properties.  The code here is using pixels to set the font size of all paragraphs to 14 pixels.\n\n```\n p {\n   font-size: 14px;\n  }\n```\n\nWith the changing landscape of viewing devices and their varying screen sizes, pixels have lost some of their populatrity. As an absolute unit of measruemnt, they don't provide too much flexibility.  \n\n###Relative lengths\n\nIn addition to absolute length values, there are also relative length values.  Relative length values are a little more complicated, as they are not fixed units of measurement; they rely on the lenght of another measurement\n\n*Percentages*\n\nPercentages, represented by the % unit notation, are one of the most popular relative values.  Percentage lengths are defined in relation to the length of another object.  FOr example, to set the width of an element to 50% we have to know the width of its parent element, the element it is nested within, and then idenfity 50% of the part element's width.\n\n####Summary\n\nTo breifly recap, within this lesson we've discussed the following:\n\n- How style sheets cascade from the top to the bottom of a file\n- What specificity is and how we cna calculate it\n- How to combine selectors to target specific elements or groups of elements\n- How to use multiple classes on a single element to layer on different styles for more modular code\n- The different color values available to use within CSS, including keyword, hexadecimal, RGB, and HSL values\n- The different length values available to use within CSS, including pixels, percentages, and em units.\n\n\n\n--------------------\n\nEvery web broswer has its \n\n\n\n- selector:\n- property:\n- id, class, and name:\n\n*The Difference Between HTML and CSS*\n\nThese two technolgoies are so intertwined in contemporary Web pages that it seems like they do the same thing, and that they are dependent on each other.  However, they are distinct and indepeneted with different purposes.  HTML provides the structure and content of a web page;CSS describes the appearance, or presentation of the page.  There is a bit of overlap that can lead to some confusion: CSS can dictate the apparent structure, while HTML can inform the browser of some presentation elements.\n\n*HTML and CSS Syntax*\n\nHTML and CSS both have simple syntax, you can learn nearly all you need for each language in a few minutes. Take the time you need to learn it well, and both HTML and CSS will become routine in no time.\n\nFor the most part, you shouldn't worry about the specific tags, attributes, selectors and properties yet.  Instead, focus on how to put these items together to create well-informed HTML and CSS.  The rest will come with time and practice. \n\n*Structure of a Web Page*\n\nAll web pages start with some routine code that defines the basic layout of the document.  It includes a DOCTYEP (we'll explain this later), an `<html>`, `<head>` and `<body>` element, and a few other tags in the `<head>` section.  Learn what this boilerplate code does, and how to use it in your web pages.\n\n*Basic HTML elements*\n\nThe best way to learn HTML is to use it.  The more you use it, the less often you'll need to refere to the documenation; however, you'll probably never learn it all, so don't try.\n\nStart by learnng to use the `<p>` (paragrapah) `<a>` (anchor) and `<h1>`-`<h6>` elements.  Paragraphs are the primary organizational construct for text on web pages, and anchors represent links to other pages, while headings occur on most pages.  These elemetns are so common that you want to learn them as soon as possible, so go ahead and memeorize them.\n\nyou should also become familiar with these elemetns:\n\n- `<em>`, `<strong>`\n- `<header>`, `<main>`\n- `<article>`, `<section>`, `<aside>`\n- `<div>` and `<span>`\n\nyou don't have to know them by heart; you will rememeber them through repeated use. \n\n*Using CSS with HTML*\n\nBecome familiar with the three ways to use CSS in an HTML document: inline, internal, and external.  For now, you hsould learn to use the `<style>` tage to provide internal CSS.\n\n*Basic CSS Selectors*\n\nCSS has three primary types of selectors (tag, id, and class) that select elements based on the tag name, `id` attribute, or `class` attribute.  Learn the syntax for these three selectors, but don't get bogged down trying to memorize how you can combine them.  For now rely on documentation.\n\n*CSS Properties*\n\nStick to the documentation as you start out; don't try to memorize CSS properties until you've used them a few times and seen how they work and interact with HTML.  This way, you'll learn the features you need most often without spending a lot of time absorbing material that you may never use. \n\nThe most important properties introduced in this lesson are `color`, `background-color`, `font-family`, and `font-size`; we recommend memorizing these.  The other properties you see in this lesson will become familiar with time and prazctice. \n\n*Use Your Browser's Insperctor*\n\nMuch of your work in this course invovles looking at the structure and styling web pages: sometimes you your web pages, sometimes form another site.  Either way, the best way to examine these features and determine how the HTML and CSS work is with your browser's Inspector software (this may be an add-on in some browsers).\n\n#### Linters\n\n\n*linters* check computer code for errors, misuse and style issues.  Unlike the W3C validoators, linters look at style and usage rather than conformance to standards.  The validators find uses of deprecated elemetns, poor element nesting, and non-standard attributes and properites; linters detect poor indentation and ofrmatting as well as failures to follow best practices.\n\nYou can find linters for most development languages. \n\n##creating HTML skeleton \n\n```html\n<!DOCTYPE html>\n  <head>\n    <title>your page title goes here</title>\n    <meta charset=\"utf-8\" />\n  </head>\n  <body>\n  </body>\n</html>\n```\n\nLets break down the above html skelton.\n\n- `<!DOCTYPE html>`:  this is a Document Type Defition aka, DTD or DOCTYPE.  Officially the DOCTYPE isn't part of HTML; it isn't a tag or eleemnt even though it looks like one.  In fact, it's merely a message that tells the browser what sepcific markup language to expect --for example, XLM.  This particular version of the DOCTYPE specifies that the documnet uses HTML5; It's the one you'll use most often unless you're writing for older browsers or an XML or XHTML applicaiton.\n\nThe DOCTYPE must be the first tiem in an HTML documnet; not even whitspace can precede it. \n\n- The `html` element encloses the entire HTML documnet.  The `lang=\"en\"` attribute informst he user's browser that the web page uses the English language for text. Everything esle about the page, both its content and related meta-inforamtion must be between the opening and closing `html` tags\n- The `head` element encloses the document header, which consists of elements that provide addtional information to the borwser;  the browser ordinarily does not display meta-inforationn in the page content area.  Here, the `title` gives the page a title, while `<meta charset=\"utf-8\" />` tells the browser to expect the UTF-8 character encoding (most web pages us this encoding).  Most broswers display the title in the title bar or table so be sure you always provid a title element for a webparg. \n- The `body` elemetn is the content area of the page.  The browser renders the HTML inside the `body` in the browser content area.  In this case, we have not content, so this page renders as a blank page.  \n\n###Classses, IDs, and Names\n\nHTML provides three ways to identify certain elements: classes, ids, and names. Any element can use a `class` or `id` attribute and a variety of elements can use the `name` attribue.  SOme elements can use all three at once:\n\n```\n<input type=\"submit\" name=\"save\" id=\"save-button\" class=\"default-button\" />\n```\n\nWe review each attribute below.  Don't concern yourself with the tags we use: you can look up unfamiliar tags if you want, but you dont' need to know what they do or how to use them at this point.  OUr focus here is on these thrre attributes.\n\n####Classes\n\nThe `class` attribute identifies a set of page elements that you wish to style consistently.  For instance, if you want to display a list of students but highlight students who serve as teaching assistants, you can apply a class of `teaching-assistant` to each TA's data:\n\n```html\n<table>\n  <tbody>\n    <tr class=\"teaching-assistant\">\n      <td>Elizabeth</td>\n      <td>JS230</td>\n    </tr>\n  \n    <tr>\n      <td>Nancy</td>\n      <td>RB101</td>\n    </tr>\n    \n    <tr>\n      <td>Joes</td>\n      <td>RB120</td>\n    </tr>\n    \n    <tr class=\"teaching-assistant\">\n      <td>Pete</td>\n      <td>JS225</td>\n    </tr>\n    \n    <tr>\n      <td>Kim</td>\n      <td>LS202</td>\n    </tr>\n  </tbody>\n</table>\n\n```\n\nCSS\n\n```css\n  tr {\n    background-color: lime;\n    font-size: 200%;\n  }\n  \n  .teaching-assistant {\n    background-collor: yellow;\n  }\n```\n\n- Use the `class` attribute to assign a class or classes to an element.\n- Any number of eemnets may belong to the same class.\n- Any element can belong to one or more classses.  List all the names separated by spaces in the `class` attribute, e.g., `class=\"executive management full-time\"`\n- Prefer semantic class names; they should rpvide meaning. For instance use `teaching-assistant` rather than `yellow-background`.\n- The CSS class selectors (`.classname`) to slect element sby class, e.g. `.teaching-assistant`.\n- Class selctors have lower CSS specificity than ID selectors (an ID selector overrides a class slector), but higher than tag name selctors (a class selector overrides a tag selector).  Thus, the `.teaching-assistant` selector overrides the `tr` selector.  \n\n####IDS \n\nThe `id` attribute applies a unique indentification string to a single element, such as a headline; no other `id` attributes on the page should have the same ID.\n\n```\n<h1>This is a plain h1 heading</h1>\n<h1 id=\"headline\">This is my headline</h1>\n```\n\nYou can now give the headline some styling that is unique to it:\n\n```\n#headline {\n  color: red;\n  font-size: 48px;\n}\n```\n\n- Us the `id` attribute to assign an ID to an element\n- Each ID on a page must be unique\n- Each element can have one ID or none\n- Use semantic ID names; they should provide meaning.  For instance, use and ID name of `headline` rather than `big-font`.\n- Use CSS ID selectors (`#idname`) to select elements by ID, e.g. `#headline`.\n- ID selectors have higher CSS specifcity than class selctors (an ID selector can override a class selector).\n\n###Names\n\nWe won't use the `name` attribute until much later in this course.  For now, all you must know about the `name` attribute is that it ties form elemetns to data on the server-it typtically doesn't paly a role in styling.  YOu can us tthe `[name=\"field-name\"]` selector to select elements by name, but you should us a class or ID selector instead.  When you submit a form, the browser sends the form data to the server using name/value pairs in which each name comes from the associated `name` attribute.  For instance:\n\n``` html\n<form method=\"get\" action=\"#\">\n  <label for=\"first-name-field\">First name:</label>\n  <input type=\"text\" name=\"first-name\" id=\"first-name-field\"/>\n  \n  <label for=\"last-name-field>Last name:</label>\n  <input type=\"text\" name=\"last-name\" id=\"last-name-field\" />\n  \n  <input type=\"submit\" value=\"Search\" />\n\n</form>\n\n```\n\nWhen you submit this form, the browser constructs a query string that looks like this:\n\n```\nfirst-name=Joe&last-name=Jones\n```\n\nNote that the browser does not send the `id` attribute value to the server.\n\nSicne the `for` attribute references and ID (as we'll see later), it's accepted practice to use both a `name` and an `id` on form eleemnts to use the same value for both:\n\n```\n<form method=\"get\" action=\"#\">\n  <lable for=\"first-name\">First name:</label>\n  <input type=\"text\" name=\"first-name\" id=\"first-name\" />\n  \n  <label for=\"last-name\">Last name:</label>\n  <input type=\"text\" name=\"last-name\" id=\"last-name\" />\n  \n  <inpu type=\"submit\" value=\"Serach\" />\n\n</form>\n  \n```\n\n- Use the `name` attribute to assign a name to a form data element that the server can use to obtain the value.\n- Not all tags accept the `name` attribute; it applies to input controls in forms.  Some other elements have a `name` attribute, too, but with a different meaning. \n- Always use a `name` attribute on form eleemnts that accept it.\n- Each name in a form shoul dbe unique to that form except for radio buttons and checkboxes that belogn to a single group.\n- Use descriptive `name` Values, not semantic.  For instance, use `name=\"last-name\"` instead of  `name=\"input-field\"`.\n- Avoid trying to select elements in CSS by using the `name` attribute. \n-\n\n###Practice problems\n\nwhich of these tags are semantic and which are not\n\n-`<article>` semantic\n-`<aside>` semantic\n-`<b>` semantic\n-`<div>` \n-`<footer>` semantic\n-`<h3>` semantic\n-`<header>` semantic\n-`<section>` semantic\n-`<span>` \n-`<strong>` semantic\n\n###Formatting Some Text\n\nBelow aer some HTML elements you can use to format text.  Most change how the content looks, and most also change the semantic meaning.  \n\nHere are some useful formatting eleemnts that you can use inside \"containder\" elements like the paragraph and heading elements (we'll discuss containers in more detail later.)\n\n|*Element*| *Description*|\n|--|--|\n|strong| The text has greater importance than the surrounding text; most browsers use boldface. Example; you *must* remember to turn the light off. |\n|em| Adds emphasis to the text; mos browsers use italics.  Example: we do them because they are **hard**!|\n|b| Stylistically offset text, such as keywords.  Example: ES6 adds the keywords *const* and *let*|\n|i| Alternate voice text.  Example: I said \"Hello.\" She sad \"**Goodbye**\"|\n\n#HTML STYLE\n\n[this has about of info on html syntx/style](https://learn.shayhowe.com/html-css/writing-your-best-code/)\n\n- avoid cramming more than two elements on a single line.\n\n``` html\n<!-- Legal but hard to read -->\n<nav><ul><li>Home</li><li>Sign Up</li><li>Log In</li><li>Log Out</li></ul></nav>\n\n<!-- Good -->\n<nav>\n  <ul>\n    <li>Home</li>\n    <li>Sign Up</li>\n    <li>Log In</li>\n    <li>Log Out</li>\n  </ul>\n</nav>\n\n<!-- Acceptable, but a bit hard to read -->\n<li><a href=\"home.html\">Home</a></li>\n<a href=\"home.html\"><img src=\"home.gif\" /></a>\n```\n\n- indent nested tags by two spaces, four spaces, or hard tabs.  (be consistent).\n\n- don't indent the `<html>` tag\n- Use `/>` with *self-closing* tags (`<br />`, `<img />`, etc).  The Howe tutorial suggests not using the `/`, but other developers feel that the trailing `/` improves readability. It also helps when you must support XML or oder verios of HTML.  Either way be consisten. \n\n``` html\n<!-- Good -->\n<br />\n<img src=\"picture.jpg\" />\n\n<!-- Good -->\n<br>\n<img src=\"picture.jpg\">\n\n<!-- Inconsistent (bad) -->\n<br>\n<img src=\"picture.jpg\" />\n\n```\n-when using Flex or Gridl (we'll talk about these later), consider placing the most significant content blocks near th etop of the file, adn the least important at the bottom. \n\n# CSS Style\n\n- Con't put more than one property on the same line.\n\n```\n/* Legal but hard to read and maintain */\np {\n  background-color: yellow; border: 3px dashed #888; color: red;\n}\n\n/* Okay */\np {\n  background-color: yellow;\n  border: 3px dashed #888;\n  color: red;\n}\n```\n\n- an exception to the above rule occurs when using *fallbacks*.  To support older browsers, CSS developers must somtimes provide two or more different values for a porperty; one that pplies to contemporary browsers, and another for odlder browsers.  You can list fallbacks on the same line to show when you are using one:\n\n``` html\np {\n  background-color: yellow;\n  color: red;\n  width: 50%; width:50vw /* fallback to 50% if 50vw not recognized */\n}\n\n```\n\n- Put the opening `{` on the same line as the selector. Put the closing `}` on a line by itself or at the end of the last property\n\n\n```\n/* Legal but hard to read */\n\np \n    {\n    color; red;\n}\n\n/* Okay */\n\np {\n  color: red;\n}\n\n/* Also okay */\n\np\n{\n  color: red;\n}\n\n/* Also okay */\np { color: red; }\n\n/* Also okay, but unusual */\np {\n  color: red;\n  width: 500px; }\n\n```\n\n- Inclue a space after the `:` in `property: value;`. Don't use spaces before the `:`\n\n```\n/* Legal but hard to read */\n\np {\n  background-color:orange;\n  border  :3px solid green;\n  color:black;\n}\n\n/* Okay */\np {\n  background-color: orange;\n  border: 3px solid green;\n  color: black;\n}\n```\n\n- Don't use spaces before the `;`\n\n```\n/* Legal but not common usage */\n\np {\n  background-color: orange ;\n}\n\n/* Okay */\np {\n  background-color: orange;\n}\n```\n\n- The order of pproerties in each rule is **typiucally** insignificant; you can use them in any order.  However, be mindful of how related shortcuts and long-form items like `margin` and `margin-left` interact; the property listed second will override the first, either wholly or in part. \n\n```\np {\n    margin: 25px;\n    margin-right: 10px;\n    /* Partial override: `margin: 25px 10px 25px 25px;` */\n}\n\nblockqoute {\n  margin-right: 10px;\n  margin: 25px;\n  /* Complete override: `margin: 25px;` */\n```\n\n- The order of the rules is significant but depends upon the tricky cascade, specificity, and inheritance rules.  List your slectors in the function groups.  For instance, put all the header-specific slectors together, all of the article-specific selectors together etc -try to keep thinngs grouped by funciton and you will probably do fine.  If one ore more selctors don't seem to work, start looking at the cascade, specificity and inheritance rules.  Linters like stylelint can detect potential problems and save you a great deal of debugging time. \n\n-Avoid using tag slectors (`h1`, `p`, etc) and ID selectors (`#title`) as much as possible Note that the specificty fules give tag slectors the lowest priority and ID selctors the highest.  Therfore if you have the following code:\n\n```html\n<h1 class=\"heading\" id=\"my-heading\">Hello</h1>\n```\n```\nh1 { color: red}\n#my-heading { color: blue;}\n.heading { color: green; }\n```\n\nThen the `#my-heading` selector will win out, and the heading will be blue.  If you use class selctors as much ass posisble, you will have fewer specifity issues to wowrry about.\n\n###Summary\n\n#### HTML\n\n- HTML is an acryonym for HyperText Markup Language.\n- HTML uses markup to organize your content and give it semantic meaning.\n- Elements are the basic building blocks of HTML.\n- We use tags in HTML to represent elemetns.\n- Tags may have attributes that add details to thhe element.\n- The Document Type Definition (DTD or DOCTYPE) tells the borwser that subset of HTML you intend to use.\n- All document srequire a DOCTYPE.\n- All documents hsould have `html`, `head`, `title`, and `body` tags, and should also include a `meta` tag that defines the character set.  The standard does not require these tags, but always using them will keep you out of trouble.\n- HTML attribues `id`, `class` and `name` assign different kinds of indentificaiton information to HTML elements\n- THe `p`, `a` `em`, `strong` and `h1`..`h6` tags; you should memorize these, you should also be familiar with the `header`, `main`, `article`, `seciton`, `aside`, `div` and `span` tags, but you don't have ot recognize them yet; you will through repeated use, though.\n- HTML character enetities, and how to use them in plac eof the literal `<`, `>`, and `&` characters. \n\n#### CSS\n\n- CSS is an acronym for Cascading Style Sheets.\n- CSS tells your browser how to present content with sapcing, colors, sizing, font styles, background images, placment, and much more.\n- CSS properties have a name and value.\n- CSS rules have a selector that descibes what elemetns to style and a list of zero or more properties that define how the browser should render them.\n  - CSS tag selectors select HTML elements by element (tag) name, e.g., `h1`\n  - CSS class Selectors select HTML elements by class name.  The selctor consists of a `.` followed by the class name, e.g. `.highlight`.\n  - CSS ID selectors select HTML element by class name.  The selector consists of a `.` foloowed by the class name, e.g., `.highlight`.\n  - CSS ID selectors select HTML elements by ID name.  THe selector cinsists of a `#` followed by the ID, e.g. `#intro`\n  - You can concatenate CSS sleectors to make them more specific, eg. `strong.highlight`\n  \n-CSS has both specificity and inheritance rules that control the notion of the cascade; together, these these rules define how CSS rules with different seletor interact.\n- CSs font stacks tell the browsers which font to use by providing a list of candidate fonts along with an optional \"fallback\" font family.\n- The difference between serif and sans-serif fonts.\n- The differences, benefits and problems with inline, internal and external CSS.\n- How to set text and background colors, font families and font sizes."
    }
  ]
}