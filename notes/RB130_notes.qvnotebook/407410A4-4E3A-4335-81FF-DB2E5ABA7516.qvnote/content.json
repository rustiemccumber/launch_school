{
  "title": "Challenges",
  "cells": [
    {
      "type": "markdown",
      "data": "###easy_1\n\noctal: Revisit this\n\ntrinary: got a solution for this, took awhile\n\nSum_of_multiples:  I really struggled on this, should go back an revisit.\n\ntest_anagrams:  revisit this as well\n\nword_count: revisit this, scan and regex should be used, I did not use scan in my solution\n\n###Challenges attempt 2\n\n####easy_1\n\n- i had problems with series, but this is because i didn't read the probably and i forgot that `def` goes infront of initialize. \n\n- sieve of erathonthenes:  I had a tough time with this one. \n\n- I had a hard time with the octal. should go back and repeat this\n- word_count_try2, you should go back to look at this because you didn't get the regex. and scan comes in super handy here. \n\n-perfect_number:  i got this one but didn't realize the method was supposed to be a class method.  I also forgot that you can call other class methods within a class method without prepending `self` to the method invocation. this is because when you call without self it is already referencing what the higher method was referencing.\n\n- roman_numerals:  didn't even try, looked annoying, come back to this. \n-\n\n### easy_2 try_1\n\n- odd words and how to work with a code challenge.: you should redo this one but take longer on the set up, and write you own test cases.  Outline edge cases and failures and test for these. a failure is probably if the word is longer than 20 chars, but no need to test for that. TRY THE BONUS TOO! \n\n###Medium \n####secret hand shake\ngo back and do this one again, you completed it however you didn't know about the `Integer#to_s` method. \n\n####LUHN NUMBER\n\n if go this correct, but go by through to look at the more elegant ways people ahve completed it.\n\n####PIG LATIN\n\nthis took me forever to complete, i eventually got to the correct solution but there was a lot of hack and slash. Do this again more deliberately"
    }
  ]
}