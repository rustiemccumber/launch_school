#! /usr/bin/env ruby

require "pg"
require "io/console"

class ExpenseData

  def initialize
    @connection = PG.connect(dbname:"expenses2")
  end 

  def list_expenses

    result = @connection.exec("SELECT * FROM expenses")
    display_count(result)
    display_expenses(result) if count_expenses(result) > 0
  end

  def search_expenses(memo)
    sql = "SELECT * FROM expenses WHERE memo ILIKE($1)"
    result = @connection.exec_params(sql,["%#{memo}%"] )
    display_count(result)
    display_expenses(result) if count_expenses(result) > 0
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses(created_on, amount, memo) VALUES ( $1, $2, $3)"
    result = @connection.exec_params(sql, [date, amount, memo])
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses where id = $1"
    result = @connection.exec(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec(sql, [id])

      puts "the following expense has been deleted"
      display_expenses(result)
    else 
      puts "there is no expense with the id '#{id}'."
    end 
  end

  def delete_all_expenses
    sql = "DELETE FROM expenses"
    @connection.exec(sql)
    puts "All expenses have been deleted"
  end

  private

  def display_expenses(result)
    result.each do |tuple|
      row = tuple["id"].rjust(3),
            tuple["created_on"].rjust(10),
            tuple["amount"].rjust(12),
            tuple["memo"]

     puts row.join(" | ")
    end
    
    puts "-" * 50
  
    puts "total" + "#{total_expenses_amount(result).to_s.rjust(25)}"
  end

  def display_count(result)
    count = count_expenses(result)
    if count == 0
      puts "there are no expenses."
    else
      puts "there are #{count} expense#{"s" if count !=1}."
    end
  end 

  def count_expenses(result)
    result.ntuples
  end

  def total_expenses_amount(result)
    result.field_values("amount").map(&:to_f).inject(:+)
  end
end

class CLI

  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift
    case command
    when "list"
      @application.list_expenses
    when "add"
      amount, memo = args[0], args[1]
      abort "you must provide an amount and memo" unless amount && memo
      @application.add_expense(amount, memo)
    when "search"
      memo = args[0]
      @application.search_expenses(memo)
    when "delete"
      id = args[0]
      @application.delete_expense(id)
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch
      @application.delete_all_expenses if response == "y"
    else 
      display_help
    end 
  end

  def display_help
    puts <<~HELP
      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
